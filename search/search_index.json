{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"XDC Network Docs","text":""},{"location":"#xdc-network-revolutionizing-the-future-of-decentralized-finance-and-global-trade","title":"XDC Network: Revolutionizing the Future of Decentralized Finance and Global Trade","text":"<p>XDC Network is a pioneering blockchain platform tailored to meet the evolving needs of decentralized finance (DeFi) and global trade. With its unparalleled speed, scalability, and cost-efficiency, XDC Network has become the go-to choice for developers creating decentralized applications (DApps) and for users looking to engage in the next generation of financial and trade ecosystems.</p>"},{"location":"#key-features-and-benefits-of-xdc-network","title":"Key Features and Benefits of XDC Network","text":"<ul> <li> <p>Compatibility with the Ethereum Ecosystem</p> <p>Developers can seamlessly migrate their Ethereum-based projects to the XDC Network, taking advantage of its superior speed, scalability, and lower transaction costs.</p> </li> <li> <p>Global Trade and Finance Focus</p> <p>XDC Network is specifically designed to cater to the needs of decentralized finance (DeFi) and global trade, offering optimized solutions for businesses and financial institutions.</p> </li> <li> <p>Strong Ecosystem Support</p> <p>Backed by a robust infrastructure, the XDC Network is supported by leading RPC providers, wallets, blockchain explorers, and data indices, along with significant grant programs for developers.</p> </li> <li> <p>Thriving DeFi Ecosystem</p> <p>XDC Network hosts a diverse range of DeFi applications, including decentralized exchanges (DEXs), lending platforms, and asset tokenization services, driving innovation in the financial sector.</p> </li> <li> <p>Community-Driven Growth</p> <p>The XDC Network is powered by a dynamic community of developers, validators, and users who actively contribute to its continuous development and global expansion.</p> </li> <li> <p>Comprehensive Asset Support</p> <p>XDC Network provides extensive support for a wide array of digital assets, ensuring optimal composability and integration opportunities for developers and users alike.</p> </li> </ul>"},{"location":"#chains","title":"Chains","text":"<p>The XDC protocol serves as a messaging and confirmation layer for global payments. Also, the XDC protocol supports smart contracts and Internet of Things (IoT) integrations. As a highly scalable enterprise-grade hybrid blockchain, the XDC protocol boasts a high throughput of 2,000 transactions per second (TPS) and near-instant transaction finality.</p> XDC Chain <p>XDC Network is a pioneering blockchain platform tailored to meet the evolving needs of decentralized finance (DeFi) and global trade. With its unparalleled speed, scalability, and cost-efficiency, XDC Network has become the go-to choice for developers creating decentralized applications (DApps) and for users looking to engage in the next generation of financial and trade ecosystems.</p>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li> <p>Decentralized Finance (DeFi)</p> <p>XDC Network serves as a hub for DeFi activities, offering users access to a broad spectrum of financial products and services, all powered by its efficient and secure blockchain technology.</p> </li> <li> <p>Trade Finance and Tokenization</p> <p>The XDC Network is optimized for trade finance solutions, enabling the tokenization of real-world assets and providing a platform for secure and transparent global trade transactions.</p> </li> <li> <p>Decentralized Applications (DApps)</p> <p>Developers can build and deploy a variety of DApps on the XDC Network, leveraging its scalable infrastructure, low transaction costs, and compatibility with the Ethereum ecosystem.</p> </li> <li> <p>Supply Chain Management</p> <p>XDC Network offers advanced solutions for decentralized supply chain management, ensuring transparency, efficiency, and traceability across global supply chains.</p> </li> <li> <p>Blockchain and AI Integration</p> <p>As the demand for Artificial Intelligence (AI) grows, XDC Network is paving the way for integrating AI with blockchain technology, providing a robust platform for innovative AI-driven applications.</p> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"XDC Chain <p>Get started with XDC Network: Unlock the power of decentralized finance and global trade.</p> White Paper <p>Technical and Business White Paper of the XDC Network</p> XDC Network: RPC Endpoints  <p>Obtain the RPC Endpoint for XDC Network</p> XDC Network: Set up Node  <p>XDC Network Masternodes are the backbone of the network, ensuring lightning-fast transaction validation and enhanced security.</p> Developer Tools  <p>The XDC Chain Network provides a variety of tools and resources to help developers build and deploy applications on the blockchain.</p> XDC Subnet <p>XDC Subnet is a technology that allows you to create a secure, scalable, and decentralized network within the XDC Ecosystem.</p>"},{"location":"whitepaper/","title":"White Paper","text":"Technical White Paper <p>Technical White Paper of XDC Network</p> Business White Paper <p>Business White Paper of XDC Network</p>"},{"location":"announce/","title":"Announcements","text":""},{"location":"announce/#announcement","title":"Announcement","text":"Solidity 0.8.28 support on XDC Apothem Latest Solidity 0.8.28 will soon be available on the XDC Apothem Testnet Coming Soon! XDC Network to Introduce EIP-1559 Support on Apothem The XDC Network continues to evolve with its latest upgrade, bringing EIP-1559 support to the Apothem Testnet. 2025 February XDC 2.0 Mainnet Release XDC 2.0 Mainnet Release: Key Features and Enhancements 2024 October Solidity 0.8.23 Integration on XDC Mainnet  This EVM upgrade supports the latest version of the Solidity smart contract programming language, version 0.8.23. 2024 June"},{"location":"join-ecosystem/","title":"Index","text":"Join XDC Ecosystem         XDC token lies at the heart of XDC Network, and its transformative capabilities are truly awe-inspiring. As a versatile settlement mechanism, XDC fuels the entire ecosystem, enabling lightning-fast and cost-effective transactions while revolutionizing the way DApps function.      All dApps <p>Discover top dApps built on XDC Network Chain, the leading blockchain scaling solution.</p> RWA <p>RWA on XDC Network!</p> DeFi <p>DeFi on XDC Network!</p>"},{"location":"join-ecosystem/platforms/dapp/","title":"dApps Built On XDC Network!","text":""},{"location":"join-ecosystem/platforms/defi/","title":"DeFi Built On XDC Network!","text":""},{"location":"join-ecosystem/platforms/rwa/","title":"RWA Built On XDC Network!","text":""},{"location":"smartcontract/","title":"Smart Contract","text":""},{"location":"smartcontract/#introduction","title":"Introduction","text":"<p>Blockchain technology is a digital ledger that continuously expands by adding records, known as blocks, which are securely connected through cryptography. Each block includes a cryptographic hash of the preceding block, a timestamp, and transaction data. The structure of blockchain ensures that once data is recorded, it is nearly impossible to alter, providing a high level of security. One of the key advantages of blockchain is its decentralized nature, eliminating the need for middlemen, which reduces both time and potential conflicts. Despite its challenges, blockchain technology is recognized for being faster, more economical, and more secure compared to traditional systems, which is why it\u2019s being increasingly adopted by banks and governments.</p> <p>Now, imagine a contract that automatically executes when certain conditions are met, with the entire process managed by the blockchain network. This is the concept behind smart contracts.</p>"},{"location":"smartcontract/#what-are-smart-contracts","title":"What Are Smart Contracts?","text":"<p>A smart contract is a self-executing program stored on a blockchain that automatically enforces the terms of an agreement without the need for intermediaries. These contracts run when predefined conditions are met, ensuring transparency, security, and efficiency in various applications, including finance, supply chain management, and decentralized applications (dApps). Smart contracts eliminate the risks of manual processing and reduce operational costs by enabling trustless execution of agreements.</p> <p>Bitcoin was the first blockchain to introduce basic smart contracts, where transactions are only validated if specific conditions are met. Below is an example of a basic smart contract that includes functions to set and retrieve data, with simple operations to modify the data.</p>"},{"location":"smartcontract/#smart-contracts-on-xdc-network","title":"Smart Contracts on XDC Network","text":"<p>The XDC Network is a highly efficient, enterprise-ready blockchain that supports smart contract deployment using Ethereum Virtual Machine (EVM) compatibility. Developers can create and deploy smart contracts on XDC using Solidity, the same programming language used on Ethereum, making it easy to migrate existing dApps and build new decentralized solutions. The network\u2019s low transaction fees, fast finality (2-second block time), and energy-efficient consensus mechanism (XDPoS 2.0) make it an ideal choice for enterprises and developers seeking to build scalable blockchain-based applications. XDC\u2019s smart contracts are used in various sectors, including trade finance, tokenization, and decentralized finance (DeFi), ensuring seamless automation of business processes with enhanced security and efficiency.</p> <p>As of March 2024, the XDC Network\u2019s EVM has been upgraded to support Solidity compiler versions up to v0.8.23, incorporating enhanced security features and improved code efficiency. This upgrade ensures that developers can leverage the latest advancements in Solidity while benefiting from the XDC Network\u2019s low transaction fees, rapid finality (2-second block time), and energy-efficient consensus mechanism (XDPoS 2.0). These features make the XDC Network an ideal platform for building scalable and secure blockchain applications across various sectors, including trade finance, tokenization, and decentralized finance (DeFi).</p>"},{"location":"smartcontract/#xdc-network-to-introduce-eip-1559-support-on-apothem-testnet","title":"XDC Network to Introduce EIP-1559 Support on Apothem Testnet","text":"<p>The XDC Network is set to implement EIP-1559 on its Apothem Testnet, marking a significant upgrade to its transaction fee mechanism. EIP-1559, originally introduced on Ethereum, replaces the traditional gas auction model with a base fee and priority fee structure, improving transaction predictability and reducing fee volatility. This implementation enhances network efficiency by dynamically adjusting base fees based on network congestion. Additionally, a portion of the base fee is burned, introducing a deflationary mechanism to the XDC Network\u2019s tokenomics. Developers and users on Apothem Testnet can now test this upgrade before its potential mainnet deployment, ensuring a more seamless and optimized transaction experience. Read More</p>"},{"location":"smartcontract/#key-features-of-smart-contracts","title":"Key Features of Smart Contracts","text":"<ol> <li> <p>Trustworthiness: Smart contracts ensure that your agreements are securely stored on a blockchain, making it impossible for any party to lose or alter the contract. The terms are binding, and both parties must adhere to them.</p> </li> <li> <p>Transparency: Every detail of the smart contract is visible to all participants before they agree, eliminating the possibility of disputes. The information is open to everyone involved, ensuring clarity and preventing misunderstandings.</p> </li> <li> <p>Self-Governance: Smart contracts eliminate the need for intermediaries, such as brokers or lawyers, to validate the agreement. This also removes the risk of third-party manipulation, as the contract is automatically executed by the blockchain network.</p> </li> <li> <p>Precision: Automated contracts not only speed up the process but also reduce costs and eliminate human error. The conditions are clearly defined in the smart contract, ensuring that no detail is overlooked.</p> </li> <li> <p>Efficiency: Smart contracts automate tasks, saving considerable time that would otherwise be spent manually reviewing and processing agreements.</p> </li> <li> <p>Cost-Effectiveness: By removing the need for intermediaries, smart contracts can significantly reduce costs. For instance, you don\u2019t need to hire a lawyer to enforce the contract; the code itself ensures compliance.</p> </li> <li> <p>Security: The data in smart contracts is encrypted and protected by blockchain technology, making it highly secure and reliable for critical processes.</p> </li> </ol>"},{"location":"smartcontract/#addressing-challenges","title":"Addressing Challenges","text":"<ul> <li> <p>Upgradability: Modular smart contracts can address upgrade issues, allowing changes without losing valuable information.</p> </li> <li> <p>Proxy Contracts: Using delegatecall-based proxies enables smart contracts to be upgraded while keeping the logic and data separate. However, this method requires careful handling to avoid introducing errors.</p> </li> <li> <p>Legal Considerations: As smart contracts evolve, legal issues will gradually be resolved, but it will take time since they are still in the early stages of development.</p> </li> <li> <p>Complexity Management: Simplifying smart contracts by avoiding Turing-complete designs can help reduce the complexity involved in writing them.</p> </li> <li> <p>Oracle Problem: The oracle issue could be tackled by implementing a consensus protocol within the community, ensuring that the blockchain accurately reflects real-world conditions.</p> </li> </ul>"},{"location":"smartcontract/#applications-of-smart-contracts","title":"Applications of Smart Contracts","text":"<ol> <li> <p>Digital Identity Management: Smart contracts allow individuals to maintain control over their digital identities, managing their data, reputation, and assets securely. Businesses can use this technology to streamline the know-your-customer (KYC) process.</p> </li> <li> <p>Financial Data Integrity: Financial institutions can leverage smart contracts for accurate and transparent data recording, improving financial reporting and reducing auditing expenses. This also enhances market stability by ensuring uniform financial data across organizations.</p> </li> <li> <p>Healthcare Management: Smart contracts can store personal health records securely on a blockchain, accessible only by authorized personnel. They can also be used to manage various healthcare operations, including drug tracking, compliance with regulations, and managing medical supplies.</p> </li> <li> <p>Real Estate Transactions: Smart contracts simplify real estate transactions by cutting out intermediaries. For example, rental agreements can be directly managed on the blockchain, reducing costs and making the process more efficient.</p> </li> </ol>"},{"location":"smartcontract/data-analytics/","title":"Data and Analytics","text":""},{"location":"smartcontract/data-analytics/#data-and-analytics","title":"Data and Analytics","text":""},{"location":"smartcontract/data-analytics/#overview","title":"Overview:","text":"<p>The XDC Network\u2019s data and analytics tools are critical for understanding the dynamics of the blockchain. These tools provide detailed insights into how tokens are used, the behavior of smart contracts, and overall network activity. By leveraging these analytics, stakeholders can make informed decisions and optimize their interactions with the network.</p>"},{"location":"smartcontract/data-analytics/#key-features","title":"Key Features:","text":"<ul> <li>Comprehensive Data Collection: Gather detailed metrics on every aspect of the XDC Network.</li> <li>Customizable Dashboards: Tailor analytics dashboards to focus on specific data points relevant to your use case.</li> <li>Predictive Analytics: Use historical data to forecast future trends and identify potential risks.</li> </ul>"},{"location":"smartcontract/data-analytics/#use-cases","title":"Use Cases:","text":"<ul> <li>Business Intelligence: Enterprises can use these insights to refine their blockchain strategies.</li> <li>Development Optimization: Developers can optimize smart contracts based on usage patterns and performance data.</li> </ul>"},{"location":"smartcontract/data-analytics/#xdcscan-mainnet","title":"XDCScan - Mainnet","text":""},{"location":"smartcontract/data-analytics/#overview_1","title":"Overview:","text":"<p>XDCScan is the official block explorer for the XDC Network, providing a user-friendly interface to explore and interact with the blockchain. It allows users to search for transactions, view block details, and explore smart contracts deployed on the network. XDCScan is a vital tool for anyone interacting with the XDC Network, from developers to casual users.</p>"},{"location":"smartcontract/data-analytics/#key-features_1","title":"Key Features:","text":"<ul> <li>Transaction Tracking: Easily track the status of transactions and explore detailed information on each one.</li> <li>Smart Contract Interaction: View and interact with smart contracts directly through the explorer.</li> <li>Network Overview: Access detailed statistics about the XDC Network, including block times, gas usage, and token distributions.</li> </ul>"},{"location":"smartcontract/data-analytics/#use-cases_1","title":"Use Cases:","text":"<ul> <li>Transparency: Users can verify the details of their transactions and ensure they have been processed correctly.</li> <li>Smart Contract Verification: Developers can use XDCScan to verify the deployment and interaction of smart contracts.</li> </ul> <p>Explorer links:</p> <ul> <li>XDCScan.io - powered by OpenScan</li> <li>XDCScan.com - powered by Etherscan</li> </ul>"},{"location":"smartcontract/data-analytics/#xdcscan-testnet-apothem","title":"XDCScan Testnet (Apothem)","text":""},{"location":"smartcontract/data-analytics/#overview_2","title":"Overview:","text":"<p>The Apothem XDCScan is the XDC Network\u2019s official test environment. XDCScan Testnet (Apothem) is the block explorer for this testnet, offering all the features of XDCScan but in a testnet context. It is ideal for developers who want to simulate the mainnet environment as closely as possible before deploying their projects.</p>"},{"location":"smartcontract/data-analytics/#key-features_2","title":"Key Features:","text":"<ul> <li>Testnet Environment: A near-exact replica of the XDC mainnet, but with test XDC (TXDC) for development purposes.</li> <li>Comprehensive Testing: Developers can simulate real-world scenarios and network conditions to ensure their smart contracts and dApps function as expected.</li> <li>Community Testing: A platform for community-driven testing of new features and updates before they are rolled out to the mainnet.</li> </ul>"},{"location":"smartcontract/data-analytics/#use-cases_2","title":"Use Cases:","text":"<ul> <li>Pre-Mainnet Testing: Ensure smart contracts and applications are fully functional and secure before mainnet deployment.</li> <li>Education and Training: A learning environment for new developers to practice and improve their skills on the XDC Network.</li> </ul> <p>Explorer links:</p> <ul> <li>XDCScan - powered by OpenScan</li> <li>XDCScan - powered by Etherscan</li> </ul>"},{"location":"smartcontract/data-analytics/#xdcscan-devnet","title":"XDCScan Devnet","text":""},{"location":"smartcontract/data-analytics/#overview_3","title":"Overview:","text":"<p>XDCScan Devnet is a specialized version of XDCScan tailored for the XDC Network\u2019s development environment. It provides a safe and controlled environment for developers to test and debug their smart contracts before deploying them to the mainnet.</p>"},{"location":"smartcontract/data-analytics/#key-features_3","title":"Key Features:","text":"<ul> <li>Safe Testing Environment: Access to a full-featured block explorer in a development setting.</li> <li>Debugging Tools: Enhanced tools for tracking and fixing issues in smart contracts.</li> <li>Seamless Transition to Mainnet: Test and refine smart contracts on the Devnet before migrating them to the mainnet.</li> </ul>"},{"location":"smartcontract/data-analytics/#use-cases_3","title":"Use Cases:","text":"<ul> <li>Smart Contract Development: Developers can thoroughly test their contracts in a sandbox environment before live deployment.</li> <li>Debugging: Identify and fix bugs in smart contracts using real blockchain data without risking mainnet stability.</li> </ul>"},{"location":"smartcontract/deployment-verification/","title":"Deployment & Verification","text":""},{"location":"smartcontract/deployment-verification/#deployment-verification-on-the-xdc-network","title":"Deployment &amp; Verification on the XDC Network","text":"<p>Deploying and verifying smart contracts on the XDC Network is streamlined and developer-friendly, thanks to its EVM compatibility. Developers can use familiar tools such as Remix, Hardhat, Truffle, and Foundry to write and deploy smart contracts. After deployment, contracts can be verified on XDCScan (the network\u2019s block explorer), enhancing transparency and trust. Verification allows users and developers to review the contract\u2019s source code, ensuring authenticity and alignment with the deployed bytecode. The XDC Network\u2019s low gas fees and fast finality (2-second block time) make it an efficient and cost-effective environment for smart contract deployment and execution.</p>"},{"location":"smartcontract/deployment-verification/#using-remix","title":"Using Remix","text":"<p>Remix is an integrated development environment (IDE) that allows you to deploy smart contracts directly to a blockchain. It supports Solidity, the most popular language for smart contract development.</p> <p>Steps to Deploy a Token on XDC Network using Remix:</p> <p>Step 1: Access Remix IDE </p> <p>Visit Remix IDE in your web browser.</p> <p>Step 2: Create and Write the Token Smart Contract </p> <p>In the Remix IDE, create a new Solidity file (e.g., MyToken.sol).</p> <p>Write your ERC20 token contract or use the following basic example for an ERC20 token: solidity</p> <p>// SPDX-License-Identifier: MIT pragma solidity ^0.8.0;</p> <p>import \u201c@openzeppelin/contracts/token/ERC20/ERC20.sol\u201d;</p> <p>contract MyToken is ERC20 {     constructor(uint256 initialSupply) ERC20(\u201cMyToken\u201d, \u201cMTK\u201d) {         _mint(msg.sender, initialSupply);     } }</p> <p>Step 3: Select the Compiler Version</p> <p>In Remix, under the Solidity Compiler tab, select the correct version of Solidity (the version you used in the contract). Note: XDC Network supports up to 0.8.23 compiler version only.</p> <p>Step4: Compile the Smart Contract</p> <p>Click the Compile button to compile the contract.</p> <p>Step 5: Configure the XDC Network on Remix</p> <p>Under the Deploy &amp; Run Transactions tab, choose Injected Web3 as the environment. This will connect Remix to your MetaMask wallet (ensure MetaMask is set to the XDC Network).</p> <p>Add the XDC Network to MetaMask if not already added:</p> <ul> <li>Network Name: XDC Network</li> <li>RPC URL: https://rpc.xinfin.network</li> <li>Chain ID: 50</li> <li>Currency Symbol: XDC</li> <li>Explorer URL: https://xdcscan.com/ or https://xdcscan.io/</li> <li>Check out the Endpoint URLs: https://docs.xdcscan.com/getting-started/endpoint-urls</li> </ul> <p>Step 6: Deploy the Token</p> <ul> <li>Select your compiled contract (MyToken) in Remix and input the constructor parameters (e.g., initial supply) in the Deploy section.</li> <li>Click Deploy, and your token will be deployed to the XDC Network.</li> </ul> <p>Step 7: Verify the Token </p> <p>Verify the deployed token on XDCScan.com or XDCScan.io  Explorer. Using below methods:</p> <ul> <li>How to Verify Your Smart Contract Built on the XDC Network via Standard Input JSON on XDCScan</li> <li>How to Verify Multi-Part Smart Contracts on XDCScan Explorer: A Complete Guide.</li> </ul>"},{"location":"smartcontract/deployment-verification/#using-hardhat","title":"Using Hardhat","text":"<p>Refer the guide on Hardhat Smart Contract Verification</p> <p>After deployment, verify the contract using:</p> <p>npx hardhat verify - -network network-name contract-address constructor-arguments</p> <ul> <li>network-name: The blockchain network where the contract was deployed.</li> <li>contract-address: The address of the deployed contract.</li> <li>constructor-arguments: (Optional) If your contract\u2019s constructor takes parameters, provide them as space-separated values.</li> </ul> <p>Example (Without Constructor Arguments):</p> <ul> <li>npx hardhat verify - -network xdc 0x1234567890abcdef1234567890abcdef12345678</li> </ul> <p>Example (With Constructor Arguments):</p> <ul> <li>npx hardhat verify - -network xdc 0x1234567890abcdef1234567890abcdef12345678 \u201carg1\u201d \u201carg2\u201d</li> </ul> <p>Check out the Endpoint URLs: https://docs.xdcscan.com/getting-started/endpoint-urls</p>"},{"location":"smartcontract/deployment-verification/#using-brownie","title":"Using Brownie","text":"<p>Brownie is a Python-based development framework for Ethereum-compatible blockchains, including the XDC Network. It allows developers to write, test, and deploy smart contracts efficiently using Python. Brownie supports both Solidity and Vyper contracts, making it a versatile tool for developing decentralized applications (dApps) on the XDC Network.</p> <p>For a step-by-step guide on deploying Vyper contracts on the XDC Network using Brownie, refer to this guide.</p>"},{"location":"smartcontract/flattening-smart-contracts/","title":"Flattening Smart Contract","text":""},{"location":"smartcontract/flattening-smart-contracts/#flattening-smart-contracts-on-the-xdc-network","title":"Flattening Smart Contracts on the XDC Network","text":"<p>When a smart contract imports a contract that it depends on from another source, that top level smart contract and it\u2019s dependencies will have to be flattened before it can be verified on a block explorer.  This section explains how to flatten smart contracts using three different development toolchains; Remix, Truffle, and Hardhat.</p> <p>For a good overview of flattening smart contracts on the XDC Network please refer to this article.</p>"},{"location":"smartcontract/flattening-smart-contracts/#flattening-smart-contracts-with-remix","title":"Flattening Smart Contracts with Remix","text":"<p>Remix IDE is one of the most user-friendly tools for smart contract development. To flatten a smart contract in Remix:</p> <ul> <li>Develop Your Contract: Write and compile your smart contract within the Remix environment.</li> <li>Use the Flattener Plugin: Remix provides a plugin called \u201cSolidity Flattener\u201d that you can easily activate from the plugin manager.</li> <li>Generate the Flattened Code: Once your contract is ready, run the flattener to generate a single file containing all your code dependencies. This process is straightforward and ensures that your contract is ready for deployment on the XDC Network with minimal hassle.</li> </ul> <p>Refer to know in detail: https://www.xdc.dev/ivan_blocksscan/learn-how-to-flatten-a-smart-contract-and-verify-on-blocksscan-56on</p>"},{"location":"smartcontract/flattening-smart-contracts/#flattening-smart-contracts-with-truffle","title":"Flattening Smart Contracts with Truffle","text":"<p>Truffle is another powerful tool for smart contract development that supports the XDC Network. The process involves:</p> <ul> <li>Setup Your Truffle Project: Initialize a Truffle project and write your smart contracts.</li> <li>Install the Required Dependencies: Use NPM or Yarn to install necessary libraries for flattening, such as truffle-flattener.</li> <li>Run the Flattener: Execute the truffle-flattener command in your terminal to merge your contracts into a single file. This method is ideal for developers who prefer a more traditional development environment and want to ensure their contracts are fully prepared for deployment on the XDC Network.</li> </ul> <p>Refer to know in detail: </p>"},{"location":"smartcontract/flattening-smart-contracts/#flattening-smart-contracts-with-hardhat","title":"Flattening Smart Contracts with Hardhat","text":"<p>Hardhat offers advanced tooling for smart contract developers and supports the XDC Network natively. The flattening process using Hardhat involves:</p> <ul> <li>Initialize Hardhat: Set up a new Hardhat project and write your contracts.</li> <li>Install Flattening Tools: Use the hardhat-flatten package to simplify the flattening process.</li> <li>Execute the Flattening Command: Run the flatten command in your terminal, and Hardhat will output a single file containing all the necessary code. Hardhat\u2019s flexibility makes it an excellent choice for developers looking to deploy on the XDC Network, as it offers comprehensive tooling and support for complex smart contract workflows.</li> </ul> <p>Refer to know in detail: https://www.xdc.dev/jay_kulkarni_842b41d81b23/deploying-and-verifying-a-pepe-token-on-the-xdc-network-using-hardhat-3nc7</p>"},{"location":"smartcontract/tokens/","title":"Tokens Built On XDC","text":""},{"location":"smartcontract/tokens/#tokens-built-on-xdc","title":"Tokens Built On XDC","text":"<p>The XDC Network is a powerful blockchain platform designed to support various digital assets and decentralized applications. One of its key features is the ability to create and manage tokens, which can represent anything from currency to assets, data, or even unique digital items. On the XDC Network, tokens are classified into different standards based on their functionality and use cases. Here\u2019s an overview of the major token standards:</p>"},{"location":"smartcontract/tokens/#xrc20","title":"XRC20","text":""},{"location":"smartcontract/tokens/#overview","title":"Overview:","text":"<p>XRC20 is the most widely used token standard on the XDC Network, similar to the ERC20 standard on Ethereum. XRC20 tokens are fungible, meaning each token is identical in type and value to another token within the same contract. These tokens are primarily used for cryptocurrencies, utility tokens, and other financial instruments.</p>"},{"location":"smartcontract/tokens/#key-features","title":"Key Features:","text":"<ul> <li>Fungibility: Every XRC20 token is identical and interchangeable.</li> <li>Interoperability: XRC20 tokens can interact with various decentralized applications (dApps) and smart contracts within the XDC ecosystem.</li> <li>Efficiency: Transactions using XRC20 tokens benefit from the XDC Network\u2019s high throughput and low fees, making them ideal for financial applications.</li> </ul>"},{"location":"smartcontract/tokens/#use-cases","title":"Use Cases:","text":"<ul> <li>Cryptocurrencies: XRC20 tokens can represent any form of digital currency on the XDC Network.</li> <li>Utility Tokens: These tokens can be used within dApps as a medium of exchange, access to features, or as a reward mechanism.</li> </ul>"},{"location":"smartcontract/tokens/#xrc721","title":"XRC721","text":""},{"location":"smartcontract/tokens/#overview_1","title":"Overview:","text":"<p>The XRC721 standard allows for the creation of non-fungible tokens (NFTs) on the XDC Network. Unlike XRC20 tokens, XRC721 tokens are unique and cannot be exchanged on a one-to-one basis. Each XRC721 token has a distinct value and set of characteristics, making them ideal for representing ownership of unique items or digital collectibles.</p>"},{"location":"smartcontract/tokens/#key-features_1","title":"Key Features:","text":"<ul> <li>Uniqueness: Every XRC721 token is unique and cannot be replaced or replicated.</li> <li>Ownership Proof: XRC721 tokens are often used to prove ownership of digital or physical assets.</li> <li>Compatibility: These tokens can be used across various NFT marketplaces and platforms within the XDC ecosystem.</li> </ul>"},{"location":"smartcontract/tokens/#use-cases_1","title":"Use Cases:","text":"<ul> <li>Digital Collectibles: XRC721 tokens can represent digital art, collectibles, and other unique digital assets.</li> <li>Asset Tokenization: Real-world assets like real estate, luxury goods, and intellectual property can be tokenized as XRC721 tokens, providing proof of ownership and enabling fractional ownership.</li> </ul>"},{"location":"smartcontract/tokens/#xrc404","title":"XRC404","text":""},{"location":"smartcontract/tokens/#overview_2","title":"Overview:","text":"<p>XRC404 is a specialized token standard designed for hybrid tokens on the XDC Network. These tokens combine features of both fungible and non-fungible tokens, offering a new level of flexibility for developers and businesses.</p>"},{"location":"smartcontract/tokens/#key-features_2","title":"Key Features:","text":"<ul> <li>Hybrid Nature: XRC404 tokens can function both as fungible and non-fungible tokens, depending on their implementation.</li> <li>Customization: Developers can customize XRC404 tokens to suit specific use cases that require attributes of both XRC20 and XRC721 standards.</li> <li>Versatility: This standard is particularly useful for creating complex financial products or tokenizing assets with both unique and identical components.</li> </ul>"},{"location":"smartcontract/tokens/#use-cases_2","title":"Use Cases:","text":"<ul> <li>Fractionalized NFTs: XRC404 tokens can be used to create fractional ownership of NFTs, allowing multiple stakeholders to own a piece of a unique asset.</li> <li>Complex Financial Instruments: These tokens can represent hybrid financial products that require both fungibility and uniqueness, such as bonds with unique identifiers but common underlying assets.</li> </ul>"},{"location":"smartcontract/xdcstats/","title":"XDC Stats","text":""},{"location":"smartcontract/xdcstats/#xdc-stats","title":"XDC Stats","text":""},{"location":"smartcontract/xdcstats/#overview","title":"Overview:","text":"<p>XDC Stats is a comprehensive analytics platform designed for the XDC Network. It provides real-time data and insights into various aspects of the blockchain, including token transactions, smart contract activity, and network performance. XDC Stats is essential for developers, investors, and users who need to monitor the network\u2019s health and activity levels. </p> <p>Mainnet Stats | XinFin Network Stats</p>"},{"location":"smartcontract/xdcstats/#key-features","title":"Key Features:","text":"<ul> <li>Real-Time Analytics: Access to up-to-date statistics on transaction volumes, gas usage, and block generation.</li> <li>Network Performance: Insights into network latency, throughput, and overall efficiency.</li> <li>Historical Data: Detailed records of past transactions and blocks for audit and analysis purposes.</li> </ul>"},{"location":"smartcontract/xdcstats/#use-cases","title":"Use Cases:","text":"<ul> <li>Investment Analysis: Investors can use XDC Stats to track token performance and market trends.</li> <li>Network Monitoring: Developers and network operators can ensure optimal performance and identify potential issues.</li> </ul>"},{"location":"smartcontract/wallet/xdc-wallet/","title":"XDC Web Wallet","text":"<p>XDC Web wallet: https://betawallet.xinfin.network/</p>"},{"location":"subnet/","title":"XDC Subnet","text":""},{"location":"subnet/#xdc-subnet","title":"XDC Subnet","text":"<p>XDC Subnet is a technology that allows you to create a secure, scalable, and decentralized network within the XDC Ecosystem. It enables various use cases, including creating private subnets, deploying decentralized applications (dApps), and more. Are you ready to embark on a journey into the world of secure, scalable, and decentralized networks? Look no further than XDC Subnet, the cutting-edge technology that empowers you to create a digital realm tailored to your needs within the thriving XDC Ecosystem.</p>"},{"location":"subnet/#motivation-design-rationale","title":"Motivation &amp; Design Rationale","text":"<p>As a leading Layer-1 (L1) public blockchain, XinFin\u2019s XDC network has attrated many enterprise and institutional customers. Besides the high performance and high security that XDC already offers, these customers also demand privacy, meaning that their transactions and ledger should not be disclosed to the public. This requirement prohibits them from directly submitting transactions to XDC. Instead, they should only checkpoint snapshots of their ledger to XDC in order to extract XDC\u2019s security.</p> <p>From a system perspective, \u201csecurity via checkpointing\u201d is achieved via Layer-2 (L2) techniques, such as rollups and subnets. The most popular rollup technique, namely optimistic rollup, is not suitable for our use case. This is because while transaction execution is offloaded to L2, all these L2 transactions are still submitted to L1 as a record. Another popular rollup called zero-knowledge (ZK) rollup solves this problem. But ZK computation is slow, and the type of use cases it can currently support is very limited (such as token transfers), which cannot fulfill the diverse business needs of XDC\u2019s enterprise and institutional customers.</p> <p>On the other hand, subnet is a perfect solution. By subnet, the customer runs a blockchain and checkpoints its critical consensus data to the parent chain. This way, not only is privacy preserved, the subnet can have its own security and resiliency besides those provided by the parent chain. This is particularly useful to enterprise and institutional customers who may collaborate with untrusted partners. A common criticism against subnet solutions is the high entry bar and operational cost of running a blockchain. However, in XDC\u2019s case, this is indeed welcomed becomes enterprise and institutional customers prefer owning the infrastructure in a private and isolated domain.</p> <p>Motivated by this opportunity, XDC\u2019s core protocol team has tailor-designed a subnet solution for XDC\u2019s enterprise and institutional customers. It has the following main features: 1.  the subnet will be a sovereign, permissioned, and high-performing blockchain wholly owned by the customer. 2.  the subnet will be driven by XDC2.0, the most advanced and secure consensus engine originally-built for XDC in-house, and will be deployed to the XDC mainnet, too. 3.  a security level equivalent to the sum security of the subnet AND XDC mainnet. 4.  native EVM smart contract support. 5.  total privacy (i.e., no visibility) of the subset transactions on the XDC mainnet. 6.  full access and compatibility to XDC\u2019s abundant SDK and tools, such as the explorer and forensic monitoring system.</p>"},{"location":"subnet/#architecture","title":"Architecture","text":"<p>The architecture consists of the following key components owned by the customer:</p> <ul> <li>A subnet driven by the XDC2.0 consensus engine, with system configurations tailored for the customer</li> <li>A relayer program that checkpoint critical consensus data of the subnet to the XDC Mainnet</li> <li>A smart contract in the XDC Mainnet that verifies and records the checkpoints</li> <li>Wallet APIs that enable additional protection of subnet transaction from the XDC Mainnet</li> <li>The subnet will also natively support XDC\u2019s abundant utility tools such as blockchain explorer and forensic monitor</li> </ul> <p></p>"},{"location":"subnet/Installation_guide/","title":"Installation Guide","text":"<p>In the rapidly evolving landscape of blockchain technology, staying ahead of the curve is essential. One of the most intriguing advancements in the world of blockchain is the concept of blockchain subnets. In this comprehensive guide, we will dive deep into what blockchain subnets are, how they work, and why they are becoming a game-changer in the blockchain industry.</p> <p>What Are Blockchain Subnets? Blockchain subnets are like specialized branches of a blockchain network. They allow you to create smaller, independent networks within a larger blockchain ecosystem. Think of them as self-contained mini-blockchains, each with its own unique features and functionalities. These subnets operate alongside the main blockchain but offer more flexibility and scalability.</p> <p>How Do Blockchain Subnets Work? Blockchain subnets work by segregating the main blockchain into smaller, more manageable parts. This segmentation brings several advantages such as Scalability, Customization, Privacy and Security.</p> <p>Setting Up Your Own Blockchain Subnet XDC Subnet is a powerful technology that allows you to create a secure, scalable, and decentralized network within the XDC Ecosystem. It enables various use cases, including creating private subnets, deploying decentralized applications (DApps), and more. In this guide, we\u2019ll walk you through the steps to set up your own XDC Subnet, opening doors to a world of possibilities.</p> <p>Step 1: Uninstall Old Versions</p> <p>Before you dive into setting up XDC Subnet, ensure that you don\u2019t have any conflicting packages from previous installations. Run the following command to uninstall them:  </p> <pre><code>for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <p>Step 2: Set Up the Docker Repository</p> <p>To install Docker Engine, you need to set up the Docker repository. Follow these steps:</p> <ol> <li> <p>Update the apt package index and install required packages:</p> <p>$ sudo apt-get update $ sudo apt-get install ca-certificates curl gnupg</p> </li> </ol> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <p></p> <ol> <li> <p>Add Docker\u2019s official GPG key:</p> <p>$ sudo install -m 0755 -d /etc/apt/keyrings $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg - dearmor -o /etc/apt/keyrings/docker.gpg $ sudo chmod a+r /etc/apt/keyrings/docker.gpg</p> </li> </ol> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <ol> <li> <p>Use the following command to set up the repository:</p> <p>$ echo \\ \u201cdeb [arch=\u201d\\((dpkg - print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ \"\\)(. /etc/os-release &amp;&amp; echo \u201c$VERSION_CODENAME\u201d)\u201d stable\u201d | \\ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</p> </li> </ol> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <ol> <li> <p>Update the apt package index again:</p> <p>$ sudo apt-get update</p> </li> </ol> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <p>Step 3: Install Docker Engine</p> <ol> <li> <p>Now, you can install Docker Engine, containerd, and Docker Compose by running the following command:</p> <p>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</p> </li> </ol> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <ol> <li> <p>Verify the installation by running:</p> <p>$ sudo docker run hello-world</p> </li> </ol> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <ol> <li> <p>Update the apt package index &amp; Test the installation.</p> <p>$ sudo apt-get update $ docker compose version</p> </li> </ol> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <p></p> <p>Your Docker installation will be successfully completed using these steps!</p>"},{"location":"subnet/Installation_guide/#with-docker-set-up-lets-move-on-to-setting-up-xdc-subnet","title":"With Docker set up, let\u2019s move on to setting up XDC Subnet.","text":"<p>Step 4: Clone the Subnet Repository</p> <p>Clone the Subnet repository and change the directory:  </p> <pre><code>git clone https://github.com/XinFinOrg/XinFin-Node.git\ncd XinFin-Node/subnet/deployment-generator/\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <p>Step 5: Create a Docker Environment File</p> <p>Create a docker.env file with parameters similar to docker.env.example, &amp; make necessary configurations by entering below command.  </p> <pre><code>cp docker.env.example docker.env\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <p>Below is an example of the minimum file required for configs generation, Update the below parameters with your data in the docker.env file. Refer to check out in detail Config Explanation.</p> <ul> <li> <p>To check out exact config path, enter the following command:</p> <p>pwd</p> </li> </ul> <p>Enter fullscreen mode Exit fullscreen mode</p> <ul> <li> <p>If you don\u2019t have any private key, You can create it using XDC Beta Web wallet or else you can use XDCPay.</p> </li> <li> <p>For Devnet XDC, you can visit XDC Devnet Faucet.</p> </li> </ul> <p>docekr.env file:  </p> <pre><code>#deployment config\nCONFIG_PATH= /XinFin-Node/subnet/deployment-generator\n#subnet config\nNETWORK_NAME=testsubnet\nNUM_SUBNET=1\nNUM_MACHINE=3\nMAIN_IP=192.168.1.1\n#parentchain config\nPARENTCHAIN=devnet\nPARENTCHAIN_WALLET=0x0000000000000000000000000000000000000000\nPARENTCHAIN_WALLET_PK=0x0000000000000000000000000000000000000000000000000000000000000000\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p>Step 6: Pull the Latest Subnet Generator Image</p> <p>Pull the latest Subnet Generator image with this command:  </p> <pre><code>sudo docker pull xinfinorg/subnet-generator:latest\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <p>Step 7: Generate Configurations</p> <p>Generate configurations, this will create a new generated directory.  </p> <pre><code>docker run --env-file docker.env -v $(pwd)/generated:/app/generated xinfinorg/subnet-generator:latest &amp;&amp; cd generated\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <p>Follow the generated instructions in commands.txt to start Subnet Nodes and make sure they are mining.</p> <p>Deploy subnet on machine1: </p> <pre><code>docker compose - env-file docker-compose.env - profile machine1 pull\ndocker compose - env-file docker-compose.env - profile machine1 up -d\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <p></p> <p>Step 8: Deploy the Checkpoint Smart Contract</p> <p>Again, follow the generated instructions in commands.txt to deploy the Checkpoint Smart Contract to the \u201cdeployment-generator\u201d folder.</p> <p>Run \u201ccd..\u201d command to get back to the \u201cdeployment-generator\u201d folder.  </p> <pre><code>cd ~/.XinFin-Node/subnet/deployment-generator\ndocker run --env-file docker.env \\\n    -v $(pwd)/generated/deployment.json:/app/generated/deployment.json \\\n    --entrypoint 'bash' xinfinorg/subnet-generator:latest ./deploy_csc.sh\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p>Execute the following command to deploy the Checkpoint Smart Contract:</p> <p>This will provide you with the Checkpoint Smart Contract address (checkpoint deployed to:)</p> <p></p> <p>Step 9: Deploy Subnet Services</p> <p>Follow the instructions in commands.txt to deploy Subnet Services (relayer, stats-server, frontend) to the \u201cdeployment-generator/generated\u201d folder:  </p> <pre><code>cd ~/.XinFin-Node/subnet/deployment-generator/generated\ndocker compose --env-file docker-compose.env --profile services pull\ndocker compose --env-file docker-compose.env --profile services up -d\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <p></p> <p>Step 10: Check the Status </p> <pre><code>docker ps -a\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p></p> <p>Step 11: Explore the Subnet UI</p> <p>Finally, explore the Subnet UI by accessing it at :5000.</p> <p></p> <p>Congratulations! You\u2019ve successfully set up your XDC Subnet, enabling you to harness the full potential of XDC Network\u2019s blockchain technology.</p> <p>Checkout the guide for XDC Subnet user interface.</p>"},{"location":"subnet/Installation_guide/#some-common-issues-and-solutions","title":"Some Common Issues and Solutions:","text":"<p>Issue 1: Finding the System\u2019s IP Address</p> <p>Question: If I do not have the private IP, where can I find the IP address of my system?</p> <p>Answer: To determine your system\u2019s IP address, use the following command:  </p> <pre><code>ip a\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p>Issue 2: Locating the Checkpoint Smart Contract Address</p> <p>Question: Where can I find the checkpoint smart contract address?</p> <p>Answer: After executing the command below, you will obtain the \u201ccheckpoint smart contract address.\u201d Please consult the \u201ccommand.txt\u201d file for the necessary commands.  </p> <pre><code>cd ~/.XinFin-Node/subnet/deployment-generator\ndocker run - env-file docker.env \\\n-v $(pwd)/generated/deployment.json:/app/generated/deployment.json \\\n - entrypoint 'bash' xinfinorg/subnet-generator:latest ./deploy_csc.sh\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p>Issue 3: Resolving \u201cNo Such File or Directory\u201d Errors</p> <p>Question: What should I do if I encounter the \u201cno such file or directory\u201d error repeatedly?</p> <p>Answer: To address this, execute the command below to generate new configuration files. This will create a new directory to replace the existing one. Once you have the new directory, follow the subsequent steps as outlined in the \u201ccommand.txt\u201d file.  </p> <pre><code>docker run - env-file docker.env -v $(pwd)/generated:/app/generated xinfinorg/subnet-generator:latest &amp;&amp; cd generated\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p>Issue 4: Determining the Exact Config Path for \u201cdocker.env\u201d</p> <p>Question: How can I find the exact configuration path to update in the \u201cdocker.env\u201d file?</p> <p>Answer: To obtain the precise configuration path, use the \u201cpwd\u201d command, which will provide you with the necessary information.  </p> <pre><code>pwd\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p>Issue 5: Troubleshooting \u2018CSC Deployment Failed\u2019 Issue: Checkpoint Smart Contract Deployment</p> <p>Question: Encountering a \u201cCSC deployment failed\u201d issue during the deployment of the Checkpoint Smart Contract?</p> <p>Answer: Please verify that the provided Private Key contains sufficient funds for both the Smart Contract deployment and subsequent transactions.</p> <ul> <li> <p>If you don\u2019t have any private key, You can create it using XDC Beta Web wallet or else you can use XDCPay.</p> </li> <li> <p>For Devnet XDC, you can visit XDC Devnet Faucet.</p> </li> </ul> <p>Blockchain subnets represent a new frontier in blockchain technology. They offer the scalability, customization, and security needed to drive innovation across various industries. As blockchain subnets continue to gain momentum, staying informed about their capabilities and potential applications is crucial for anyone involved in blockchain development or adoption.</p> <p>If you have any questions or need assistance, don\u2019t hesitate to reach out to the XDC Network community on XDC.Dev. Start your XDC Subnet journey today!</p>"},{"location":"subnet/components/","title":"Upgrading the Subnet","text":"<p>404  Upgrading the Subnet</p>"},{"location":"subnet/contact/","title":"Contact","text":""},{"location":"subnet/contact/#contact-us","title":"Contact Us","text":"<p>For feedback, bug report, request, or general Subnet discussion please feel free to make a post on XDC Forum or GitHub Issues</p> <p>For troubleshooting, you can talk to us at Telegram Support Group and we will check as soon as possible.</p>"},{"location":"subnet/setting_up_your_subnet/","title":"Setting Up Your Own XDC-Subnet Tutorial","text":"<p>Setting Up Your Own XDC-Subnet Tutorial</p>"},{"location":"subnet/upgrading_subnet/","title":"Upgrading the Subnet","text":""},{"location":"subnet/upgrading_subnet/#upgrading-the-subnet","title":"Upgrading the Subnet","text":""},{"location":"subnet/upgrading_subnet/#updating-configs","title":"Updating Configs","text":""},{"location":"subnet/upgrading_subnet/#upgrading-subnet-deployment","title":"Upgrading Subnet Deployment","text":""},{"location":"subnet/upgrading_subnet/#create-a-subnet-backup","title":"Create a Subnet backup","text":"<ol> <li> <p>Shutdown the subnet</p> </li> <li> <p>Make a copy of <code>xdcchain</code> directory</p> </li> </ol>"},{"location":"subnet/upgrading_subnet/#update-subnet-versions","title":"Update Subnet Versions","text":"<ol> <li>Go to <code>docker-compose.yml</code> under <code>generated</code> directory. </li> <li>Change the docker image tag of your desired component(s).</li> <li>Run: <pre><code>  docker compose --env-file docker-compose.env --profile machine1 up -d\n  docker compose --env-file docker-compose.env --profile services up -d\n</code></pre></li> </ol> <p>Using <code>latest</code> tag is not recommended since not all components version are not guaranteed to be compatible.</p>"},{"location":"subnet/upgrading_subnet/#updating-services-configs","title":"Updating Services Configs","text":"<ol> <li>Shut down subnet services <pre><code>docker compose --env-file docker-compose.env --profile services down\n</code></pre></li> <li> <p>Update configuration (usually ENVs inside common.env file)</p> </li> <li> <p>Start subnet services </p><pre><code>docker compose --env-file docker-compose.env --profile services up -d\n</code></pre> </li> </ol>"},{"location":"subnet/components/api_library/","title":"API","text":""},{"location":"subnet/components/api_library/#api-library","title":"API Library","text":"<p>This section specifies the API library we develop for the subnet users to confirm subnet transactions.</p>"},{"location":"subnet/components/api_library/#specifications","title":"Specifications","text":"<p>TBW</p>"},{"location":"subnet/components/checkpoint_contract/","title":"CSC","text":""},{"location":"subnet/components/checkpoint_contract/#checkpoint-smart-contract","title":"Checkpoint Smart Contract","text":"<p>This section specifies the Checkpoint Smart Contract in the parent chain that protects the child chain.</p>"},{"location":"subnet/components/checkpoint_contract/#design","title":"Design","text":""},{"location":"subnet/components/checkpoint_contract/#overview","title":"Overview","text":"<p>The primary function of the parent chain smart contract is to receive block data from the subnet node, verify it, and store it. </p> <p>Noteworthy aspects:</p> <ul> <li> <p>Every block data received will be verified to ensure the signature is signed by validators and has passed with \u2154 of the votes.</p> </li> <li> <p>In the gap block occurring in the middle of each epoch, a <code>next</code> may appear, which will be selected for temporary storage.</p> </li> <li> <p>In each epoch block, a <code>current</code> may appear, which will choose the <code>next</code> selected during the gap as validators from the current block to the next epoch.</p> </li> <li> <p>Only three consecutive blocks of <code>roundNumber</code> can confirm the previous block, and <code>mainnetNum</code> will change from -1 to <code>block.number</code> once the block is committed.</p> </li> </ul> <p></p>"},{"location":"subnet/components/checkpoint_contract/#specifics","title":"Specifics","text":""},{"location":"subnet/components/checkpoint_contract/#checkpoint","title":"Checkpoint","text":"<p>The Checkpoint contract implements a blockchain checkpoint system, which verifies and stores block header information for subnetworks. Here are some key functions and features:</p> <ul> <li> <p>The contract defines several data structures, such as <code>Header</code>, <code>HeaderInfo</code>, <code>Validators</code> and <code>BlockLite</code>. These structures are used to store block header information, validator information, and more.</p> </li> <li> <p>The contract employs several mappings and other variables to track the current block header tree, committed blocks, validator set, latest block, and so forth.</p> </li> <li> <p>The contract\u2019s constructor receives the initial validator set, the genesis block header, the first block header, etc., as parameters and initializes the contract state based on these.</p> </li> <li> <p>The <code>receiveHeader</code> function allows users to submit new block headers. This function will verify the meta information of the block header (like block number, parent block hash, etc.), the signature certificate, and update the block\u2019s submission status when specific conditions are met.</p> </li> <li> <p>Functions such as <code>setLookup</code>, <code>setCommittedStatus</code>, <code>checkUniqueness</code>, and <code>checkCommittedStatus</code> are used to update or check the contract\u2019s internal status.</p> </li> <li> <p>Functions like <code>getHeader</code>, <code>getHeaderByNumber</code>, <code>getLatestBlocks</code> and <code>getCurrentValidators</code> enable users to query block header information, validator sets, etc.</p> </li> <li> <p>The <code>splitSignature</code> and <code>recoverSigner</code> functions are used to recover the signer\u2019s address from the signature, which is necessary for verifying the block header signature.</p> </li> </ul> <p>Logic Flow:</p> <ol> <li> <p>Checkpoint uses the following parameters for contract construction:</p> </li> <li> <p><code>address[]  initial_validator_set</code>: List of initial validator addresses</p> </li> <li><code>bytes genesis_header</code>: block0HexRLP</li> <li><code>bytes block1_header</code>: block1HexRLP</li> <li><code>uint64 gap</code>: GAP block number on public chain</li> <li> <p><code>uint64 epoch</code>: EPOCH block number on public chain</p> </li> <li> <p>Relayers need to fetch every block data from the subnet node.</p> </li> <li> <p>Users can retrieve the information of each block using methods such as <code>getHeader</code>.</p> </li> </ol> <p></p>"},{"location":"subnet/components/checkpoint_contract/#lite-checkpoint","title":"Lite Checkpoint","text":"<p>Lite Checkpoint is a lightweight block header checkpoint. It implements several functions, including:</p> <ul> <li>Setting the initial validator set and related parameters during contract initialization.</li> <li>Checking whether the submitted block header meets the requirements.</li> <li>Receiving and processing submitted block headers.</li> <li>Submitting the block header and block header by block number.</li> <li>Retrieving uncommitted block header information.</li> <li>Accessing specific block header information.</li> <li>Fetching the current and next round of epoch blocks according to the index.</li> <li>Getting the latest block information.</li> <li>Accessing the current set of validators.</li> </ul> <p>Logic Flow:</p> <ol> <li> <p>Lite Checkpoint uses the following parameters for contract construction:</p> </li> <li> <p><code>address[]  initialValidatorSet</code>: List of initial validator addresses</p> </li> <li><code>bytes block1</code>: block1HexRLP</li> <li><code>uint64 gap</code>: GAP block number on public chain</li> <li> <p><code>uint64 epoch</code>: EPOCH block number on public chain</p> </li> <li> <p>Relayers only need to fetch gap/epoch block data and fetch the following consecutive <code>roundNumber</code> blocks to confirm the signed gap/epoch block from the subnet node.</p> </li> <li> <p>Users can get gap/epoch block information from methods such as <code>getHeader</code>.</p> </li> </ol> <p></p>"},{"location":"subnet/components/checkpoint_contract/#upgradeable-module","title":"Upgradeable module","text":"<p>The Upgradeable module mainly revolves around the concept of transparent proxies and the ability to upgrade the underlying logic contracts without changing the contract\u2019s address.</p>"},{"location":"subnet/components/checkpoint_contract/#proxygateway-smart-contract","title":"ProxyGateway Smart Contract","text":"<p>The <code>ProxyGateway</code> smart contract plays a central role in this module. It inherits from <code>ProxyAdmin</code> and primarily serves the purpose of creating and managing transparent upgradeable proxies (<code>TransparentUpgradeableProxy</code>).</p> <p>Key Components and Functionalities:</p> <ul> <li>cscProxies: </li> <li> <p>A mapping used to store two types of transparent upgradeable proxies.</p> <ul> <li><code>0</code> represents \u201cfull\u201d</li> <li><code>1</code> represents \u201clite\u201d</li> </ul> </li> <li> <p>CreateProxy Event: </p> </li> <li> <p>Emitted whenever a new transparent upgradeable proxy is created.</p> </li> <li> <p>createProxy Function: </p> </li> <li>Creates a new <code>TransparentUpgradeableProxy</code>.</li> <li> <p>Emits the <code>CreateProxy</code> event upon creation.</p> </li> <li> <p>createFullProxy Function: </p> </li> <li>Specifically designed for creating a transparent upgradeable proxy of type \u201cfull\u201d.</li> <li>Checks if a \u201cfull\u201d type proxy already exists.</li> <li> <p>Ensures the provided logic contract has a <code>MODE</code> function that returns \u201cfull\u201d.</p> </li> <li> <p>createLiteProxy Function: </p> </li> <li>Designed for creating proxies of type \u201clite\u201d.</li> <li>Checks if a \u201clite\u201d type proxy already exists.</li> <li>Ensures the provided logic contract has a <code>MODE</code> function that returns \u201clite\u201d.</li> </ul> <p></p> <p>Logic Flow:</p> <ol> <li>Initialization:</li> </ol> <p>The process begins with the <code>ProxyGateway</code> contract, which serves as a central hub for creating transparent upgradeable proxies. The contract owner has the capability to create either \u201cfull\u201d or \u201clite\u201d proxies.</p> <ol> <li> <p>Proxy Creation:</p> </li> <li> <p>The owner calls either the <code>createFullProxy</code> or <code>createLiteProxy</code> function based on the desired type of proxy.</p> </li> <li>The specified logic contract\u2019s <code>MODE</code> is checked to ensure it matches the desired proxy type.</li> <li>A new <code>TransparentUpgradeableProxy</code> is created with the specified logic contract, the <code>ProxyGateway</code> as the admin, and any necessary initialization data.</li> <li>The new proxy\u2019s address is stored in the <code>cscProxies</code> mapping under its corresponding type.</li> <li> <p>The <code>CreateProxy</code> event is emitted to log the creation of the new proxy.</p> </li> <li> <p>Upgrading the Proxy:</p> </li> </ol> <p>When there\u2019s a need to upgrade the underlying logic of the proxy (for instance, to introduce new features or fix bugs):</p> <ul> <li>A new logic contract version is deployed to the network.</li> <li>The owner (or authorized entity) of the <code>ProxyGateway</code> contract calls the inherited <code>upgrade</code> function from <code>ProxyAdmin</code> to point the proxy to the new logic contract.</li> <li>The proxy now delegates all calls to the new logic contract, while still retaining all its previous storage and state.</li> <li> <p>This enables the system to evolve and implement new functionalities without migrating to a new contract address or affecting the contract\u2019s stored data.</p> </li> <li> <p>Interacting with the Proxy:</p> </li> </ul> <p>Users and other contracts can interact with the proxy just as they would with a regular contract. However, behind the scenes, all function calls and data accesses are delegated to the current logic contract that the proxy points to.</p> <ol> <li>Querying and Data Access:</li> </ol> <p>Users and contracts can still query data, access functions, or invoke transactions on the proxy\u2019s address. The proxy transparently delegates these to the underlying logic contract, ensuring continuity of operations.</p> <ol> <li>Advanced Management:</li> </ol> <p>Through the <code>ProxyAdmin</code> functionality, the owner can further manage the proxy, such as changing the admin or even downgrading to a previous version of the logic contract if needed.</p> <p></p>"},{"location":"subnet/components/checkpoint_contract/#spec","title":"Spec","text":""},{"location":"subnet/components/checkpoint_contract/#apis","title":"APIs","text":"<ul> <li> <p>Functions that have access restriction to authorized client</p> <ul> <li><code>reviseValidatorSet(address[], int, int)</code>: Update subnet block header signer list at destined height</li> <li><code>receiveHeader(bytes[])</code>: Validate and store subnet headers</li> </ul> </li> <li> <p>Functions that open for public access</p> <ul> <li><code>getHeader(byte32)</code>: Return entire block header in RLP encoding format</li> <li><code>getHeaderByNumber(int)</code>: Return block hash and number at input height</li> <li><code>getHeaderConfirmationStatus(byte32)</code>: Return block committing status</li> <li><code>getMainnetBlockNumber(byte32)</code>: Return mainnet block number that processed the subnet block header</li> <li><code>getLatestBlocks()</code>: Return latest committed block and submitted block</li> </ul> </li> </ul>"},{"location":"subnet/components/checkpoint_contract/#algorithms-and-rules","title":"Algorithms and Rules","text":"<p>Block header verification follows two principle rules: 1. Received block should have consistent round number and block number associated with its parent block. 2. Received block should have enough certificates signed by the list of block signers.</p> <p>Once a block header is checked and stored, the contract will examine whether there are 3 consecutive blocks that have 3 consetive round number. If that is the case, all of the direct ancestor blocks that are prior to these 3 consecutive blocks will be committed. </p>"},{"location":"subnet/components/relayer/","title":"Relayer","text":""},{"location":"subnet/components/relayer/#relayer","title":"Relayer","text":"<p>This section specifies the relayer that checkpoints the subnet chain to the parent chain.</p>"},{"location":"subnet/components/relayer/#design","title":"Design","text":""},{"location":"subnet/components/relayer/#background","title":"Background","text":"<p>There is a strong demand from the banking industry to adopt XDC. One of the key requirements to enter the field is the ability to support subnets so that banks are able to keep the sensitive transactions within their own domain (privacy concern) but at the same time, have the ability to continuously audit the result (hash) of the subnet transactions on the XDC mainnet (security concern).</p> <p>Since the mainnet and subnets will be running as two independent node cluster, we will need to figure out a method to bridge them together to perform the auditing feature mentioned above. This is where \u201crelayer\u201d is coming into play.</p>"},{"location":"subnet/components/relayer/#high-level-architectural-diagram","title":"High-level architectural diagram","text":"<p>At high level, the relayer is able to: 1. Pull necessary data from both subnet and mainnet 2. Process and submit subnet block data as smart contract transactions into mainnet 3. When subnet masternodes list changes, report the new list and change height to the mainnet using grand-master account.</p> <p></p>"},{"location":"subnet/components/relayer/#relayer-mode","title":"Relayer Mode","text":"<p>There are 2 relayer modes \u2018Full\u2019 and \u2018Lite\u2019 where the default mode is \u2018Full\u2019. In the full mode, all subnet block headers are checkpointed to the parent chain. In the lite mode, only the Epoch and Epoch gap subnet block headers are checkpointed in the parent chain (blocks 451,900,1351,1800, and so on). The Epoch and Epoch gap blocks stores important information regarding subnet validators selection. For further reading please check Checkpoint Smart Contract.</p>"},{"location":"subnet/components/relayer/#choosing-full-or-lite-relayer","title":"Choosing Full or Lite Relayer","text":"<p>The Full mode has the advantage of being more \u2018complete\u2019 and more \u2018current\u2019 as blocks are getting confirmed in the parent chain almost immediately. The Lite mode has the advantage of using lower parent chain gas fee as the Relayer is only submitting to once every 450 blocks.</p>"},{"location":"subnet/components/relayer/#deployment","title":"Deployment","text":"<p>In the deployment <code>RELAYER_MODE</code> config is only relevant for Checkpoint Smart Contract (CSC) deployment. The relayer itself is able to detect the CSC type automatically and push block headers accordingly.</p>"},{"location":"subnet/components/repos/","title":"Repos","text":""},{"location":"subnet/components/repos/#subnet-repositories","title":"Subnet Repositories","text":""},{"location":"subnet/components/subnet_chain/","title":"XDC Subnet","text":""},{"location":"subnet/components/subnet_chain/#subnet-chain","title":"Subnet Chain","text":"<p>This section specifies the subnet itself, a sovereign, permissioned, and high-performing blockchain.</p>"},{"location":"subnet/components/subnet_chain/#design","title":"Design","text":"<p>XDC subnet is a blockchain network tailored for private and consortium use cases. It is powered by XDC2.0, which is the core engine of XDC network and enables state-of-the-art security against Byzantine attacks with forensics, fast transaction confirmation, and low energy consumption. It is also designed to enable secure checkpointing to XDC mainnet, so that it can harness the security, finality, and accountability of mainnet.</p>"},{"location":"subnet/components/subnet_chain/#xdc20-protocol","title":"XDC2.0 Protocol","text":"<p>As the core engine of both XDC mainnet and subnet, XDC2.0 maintains the consistency of the blockchain with strong security and performance guarantees. The Delegated Proof-of-Stake subprotocol elects a committee of masternodes. The masternodes run the state-of-the-art HotStuff consensus subprotocol to settle block generation and verification and confirm transactions. Besides, XDC2.0 protocol enables its unique feature, namely forensic monitoring. When the adversary corrupts more than \u2153 masternodes and violates safety, forensic monitoring can detect those actions and report irrefutable evidence of the culprits.</p> <p>The distinction between XDC2.0 for subnet and mainnet is that for subnet the masternodes are permissioned whereas for mainnet they are permissionless. </p>"},{"location":"subnet/components/subnet_chain/#your-own-blockchain-network","title":"Your Own Blockchain Network","text":"<p>XDC subnet is completely owned by you. You, the owner of the subnet, are capable of controlling several aspects of the subnet.</p> <p>First, the owner regulates the master node list. More specifically, the join/retire of mater nodes is done by smart contract calls that only the owner has access to. Also, underperforming or misbehaving masternodes could be expelled by the owner. This is in contrast with XDC mainnet, where masternodes join or leave willingly as long as they follow the rule enforced by the protocol.</p> <p>Second, the blockchain genesis can be configured by the owner. The owner is able to distribute initial tokens and create accounts, as well as deploy system-level smart contracts on the blockchain.</p> <p>Last, the owner can customize blockchain parameters, such as epoch length, max masternode number, the quorum certificate threshold, the reward per epoch, etc.</p>"},{"location":"subnet/components/subnet_chain/#integrating-with-xdc-mainnet","title":"Integrating with XDC mainnet","text":"<p>Integrating with XDC mainnet will enable subnet to harness the security, finality, and accountability of XDC mainnet. This requires the subnet owner to deploy a smart contract (XDC will provide) to XDC mainnet and report block headers and masternode changes to the smart contract.</p> <p>As long as the mainnet is secure, the block header information of the subnet is securely stored on the mainnet. Users can also query the mainnet for finality to enhance the confidence that the subnet transaction is indeed finalized. The subnet can also report the culprits to the forensic server of XDC mainnet when its forensic monitor module detects safety violations. When the culprit report is validated, necessary measurements should be taken by the owner to reestablish the security of the subnet.</p> <p>It is worth noting that the subnet can be deployed as a standalone, independent blockchain network without integrating with XDC mainnet. The choice is up to the owner whether to harness the advantages of XDC mainnet.</p>"},{"location":"subnet/components/subnet_chain/#api","title":"API","text":"<p>Subnet-specific APIs</p>"},{"location":"subnet/components/subswap/","title":"Subswap","text":""},{"location":"subnet/components/subswap/#subswap","title":"Subswap","text":""},{"location":"subnet/components/subswap/#design","title":"Design","text":"<p>Topic: Design of Subswap Cross-Chain Transfer System on XDC Zero</p> <p>Subswap is cross-chain application built on XDC Zero to provide seamless cross-chain transfer capabilities. It is structured in a multi-layered architecture, with each layer handling distinct functions to ensure smooth, secure, and efficient transactions across blockchain networks. This document provides a design overview of each layer, illustrating the components and their roles within the Subswap system.</p>"},{"location":"subnet/components/subswap/#system-architecture","title":"System Architecture","text":"<p>Subswap is organized into three layers:</p> <ol> <li>Layer 0 - XDC Zero (Core Infrastructure)</li> <li>Relayer: Manages the transfer of data and assets between blockchains by relaying transaction information across chains.</li> <li>Oracle: Provides reliable and up-to-date data for cross-chain operations, ensuring that the transfer protocols operate with accurate information.</li> <li>Endpoint: Serves as the core communication channel within XDC Zero, connecting the layers and ensuring transactions flow smoothly.</li> <li> <p>Front-End Management: Handles the user interface and manages interactions with the underlying protocols, offering a streamlined experience for users initiating cross-chain transfers.</p> </li> <li> <p>Layer 1 - Treasury</p> </li> <li>Cross-Chain Transfer Frontend: User-facing interface for initiating and tracking cross-chain transactions. This frontend simplifies the user experience, making it easier for users to start transfers between different blockchains.</li> <li>Mint/Burn Contract: Manages asset issuance and burning on different chains. This contract mints new assets on the target chain while burning them on the source chain, maintaining asset consistency across networks.</li> <li> <p>Lock/Unlock Contract: Locks assets on the source chain and unlocks them on the target chain, ensuring that the asset\u2019s total supply remains consistent and secure across chains.</p> </li> <li> <p>Layer 2 - Swap Protocol</p> </li> <li>Swap Frontend: Provides a user-friendly interface for initiating swaps between different assets on the Subswap platform.</li> <li>Swap Contract: Executes the swap logic, managing the conversion of assets based on the predefined terms and rates, ensuring that users receive the correct assets after a swap.</li> </ol>"},{"location":"subnet/components/subswap/#design-considerations","title":"Design Considerations","text":"<ul> <li>Security: The use of locking and minting mechanisms prevents double-spending and ensures the security of cross-chain assets.</li> <li>User Experience: Frontends are designed to be intuitive, making it easy for users to interact with complex cross-chain protocols.</li> <li>Reliability: Oracles and relayers provide real-time data and reliable transaction relay, reducing the chance of errors in cross-chain transfers.</li> </ul>"},{"location":"subnet/components/subswap/#conclusion","title":"Conclusion","text":"<p>Subswap leverages XDC Zero\u2019s powerful infrastructure to deliver an efficient cross-chain transfer service. By layering its architecture, Subswap can maintain security, scalability, and ease of use, meeting the needs of users looking for seamless asset transfers across multiple blockchain networks.</p>"},{"location":"subnet/components/subswap/#constructionif-you-want-to-make-a-cross-chain-transfer","title":"Construction(if you want to make a cross chain transfer)","text":""},{"location":"subnet/components/subswap/#spec","title":"Spec","text":""},{"location":"subnet/components/subswap/#subswap-api-documentation","title":"Subswap API Documentation","text":"<p>This document provides an API reference for the Subswap contracts, specifically for the <code>ParentnetTreasury</code> and <code>SubnetTreasury</code> contracts. These contracts facilitate cross-chain asset transfers by minting, burning, locking, and unlocking tokens between chains.</p>"},{"location":"subnet/components/subswap/#restricted-access-functions","title":"Restricted Access Functions","text":""},{"location":"subnet/components/subswap/#parentnettreasury","title":"ParentnetTreasury","text":"<ol> <li><code>changeEndpoint(address endpoint) -&gt; void</code></li> <li>Description: Allows the contract owner to set a new endpoint address.</li> <li>Parameters:<ul> <li><code>endpoint</code>: The address of the new endpoint.</li> </ul> </li> <li> <p>Access: <code>onlyOwner</code></p> </li> <li> <p><code>setEndpoint(address endpoint) -&gt; void</code></p> </li> <li>Description: Sets a new endpoint address, restricted to calls from the current endpoint.</li> <li>Parameters:<ul> <li><code>endpoint</code>: The address of the new endpoint.</li> </ul> </li> <li> <p>Access: <code>onlyEndpoint</code></p> </li> <li> <p><code>mint(...) -&gt; void</code></p> </li> <li>Description: Mints tokens on the <code>SubnetTreasury</code> chain in response to a cross-chain transfer.</li> <li>Parameters:<ul> <li><code>originalToken</code>: Address of the original token.</li> <li><code>name</code>: Name of the token.</li> <li><code>symbol</code>: Symbol of the token.</li> <li><code>account</code>: Address of the account receiving the minted tokens.</li> <li><code>amount</code>: Number of tokens to mint.</li> <li><code>sid</code>: Source chain ID.</li> </ul> </li> <li>Access: <code>onlyEndpoint</code></li> </ol>"},{"location":"subnet/components/subswap/#subnettreasury","title":"SubnetTreasury","text":"<ol> <li><code>changeEndpoint(address endpoint) -&gt; void</code></li> <li>Description: Allows the contract owner to set a new endpoint address.</li> <li>Parameters:<ul> <li><code>endpoint</code>: The address of the new endpoint.</li> </ul> </li> <li> <p>Access: <code>onlyOwner</code></p> </li> <li> <p><code>setEndpoint(address endpoint) -&gt; void</code></p> </li> <li>Description: Sets a new endpoint address, restricted to calls from the current endpoint.</li> <li>Parameters:<ul> <li><code>endpoint</code>: The address of the new endpoint.</li> </ul> </li> <li> <p>Access: <code>onlyEndpoint</code></p> </li> <li> <p><code>unlock(address token, uint256 amount, address recv) -&gt; void</code></p> </li> <li>Description: Unlocks tokens on the current chain, sending them to the specified address.</li> <li>Parameters:<ul> <li><code>token</code>: Address of the token to unlock.</li> <li><code>amount</code>: Amount of tokens to unlock.</li> <li><code>recv</code>: Address of the recipient.</li> </ul> </li> <li>Access: <code>onlyEndpoint</code></li> </ol>"},{"location":"subnet/components/subswap/#public-functions","title":"Public Functions","text":""},{"location":"subnet/components/subswap/#parentnettreasury_1","title":"ParentnetTreasury","text":"<ol> <li><code>burn(...) -&gt; void</code></li> <li>Description: Burns tokens on the <code>ParentnetTreasury</code> side to initiate a cross-chain transfer, sending a message to <code>SubnetTreasury</code> to mint tokens.</li> <li>Parameters:<ul> <li><code>rid</code>: Destination chain ID.</li> <li><code>rua</code>: Receiver\u2019s address on the destination chain.</li> <li><code>originalToken</code>: Address of the original token on the source chain.</li> <li><code>token</code>: Address of the Treasury token to burn.</li> <li><code>amount</code>: Number of tokens to burn.</li> <li><code>recv</code>: Address to receive tokens on the destination chain.</li> </ul> </li> <li> <p>Events:</p> <ul> <li>Emits a <code>Burn</code> event with details of the burned amount and target chain.</li> </ul> </li> <li> <p><code>test(uint256 rid, address rua, bytes memory data) -&gt; void</code></p> </li> <li>Description: Sends arbitrary data to the specified chain via the endpoint, for testing purposes.</li> <li> <p>Parameters:</p> <ul> <li><code>rid</code>: Destination chain ID.</li> <li><code>rua</code>: Receiver\u2019s address on the destination chain.</li> <li><code>data</code>: Encoded data to send.</li> </ul> </li> <li> <p><code>getEndpoint() -&gt; address</code></p> </li> <li>Description: Returns the current endpoint address.</li> </ol>"},{"location":"subnet/components/subswap/#subnettreasury_1","title":"SubnetTreasury","text":"<ol> <li><code>lock(...) -&gt; void</code></li> <li>Description: Locks tokens on the <code>SubnetTreasury</code> side to initiate a cross-chain transfer, sending a message to <code>ParentnetTreasury</code> to mint tokens.</li> <li>Parameters:<ul> <li><code>rid</code>: Destination chain ID.</li> <li><code>rua</code>: Receiver\u2019s address on the destination chain.</li> <li><code>token</code>: Address of the token to lock.</li> <li><code>amount</code>: Amount of tokens to lock.</li> <li><code>recv</code>: Address to receive tokens on the destination chain.</li> </ul> </li> <li> <p>Events:</p> <ul> <li>Emits a <code>Lock</code> event with details of the locked amount and target chain.</li> </ul> </li> <li> <p><code>getChainId() -&gt; uint256</code></p> </li> <li> <p>Description: Returns the chain ID of the current chain.</p> </li> <li> <p><code>getEndpoint() -&gt; address</code></p> </li> <li>Description: Returns the current endpoint address.</li> </ol>"},{"location":"subnet/components/subswap/#algorithms-and-rules","title":"Algorithms and Rules","text":""},{"location":"subnet/components/subswap/#minting-and-burning","title":"Minting and Burning","text":"<ul> <li>Minting (ParentnetTreasury)</li> <li>When <code>SubnetTreasury</code> locks tokens on its chain, it sends a message to <code>ParentnetTreasury</code> to mint an equivalent amount on the destination chain.</li> <li> <p>If a Treasury token contract does not exist for the original token, a new one is created and mapped to the original token in <code>treasuryMapping</code>.</p> </li> <li> <p>Burning (ParentnetTreasury)</p> </li> <li>To initiate a cross-chain transfer back to the original chain, the <code>burn</code> function is called to destroy tokens on <code>ParentnetTreasury</code>. </li> <li>After burning, a message is sent to <code>SubnetTreasury</code> to unlock an equivalent amount on the destination chain.</li> </ul>"},{"location":"subnet/components/subswap/#locking-and-unlocking","title":"Locking and Unlocking","text":"<ul> <li>Locking (SubnetTreasury)</li> <li>Tokens are locked on <code>SubnetTreasury</code> by transferring them from the caller\u2019s address to the contract. </li> <li> <p>The contract then sends a cross-chain message to <code>ParentnetTreasury</code> to mint equivalent tokens on the destination chain.</p> </li> <li> <p>Unlocking (SubnetTreasury)</p> </li> <li>In response to a burn action on <code>ParentnetTreasury</code>, the <code>SubnetTreasury</code> unlocks tokens on its chain and sends them to the specified recipient.</li> </ul>"},{"location":"subnet/components/subswap/#endpoint-and-cross-chain-communication","title":"Endpoint and Cross-Chain Communication","text":"<ul> <li>All cross-chain messages are handled through the <code>IEndpoint</code> interface, which abstracts the low-level cross-chain communication.</li> <li>Each function that initiates cross-chain actions (mint, burn, lock, unlock) encodes data using <code>abi.encodeWithSelector</code> to create a message payload, ensuring proper handling of contract-specific calls on the destination chain.</li> </ul>"},{"location":"subnet/components/xdc_zero/","title":"XDC Zero","text":""},{"location":"subnet/components/xdc_zero/#xdczero","title":"XDCZero","text":""},{"location":"subnet/components/xdc_zero/#design","title":"Design","text":"<p>XDC-Zero is a cross-chain framework that allows interoperability between XDC-Subnet and the XDC network. It ensures frictionless data transmission and rigorous validation across the Subnet and the Parentchain.</p>"},{"location":"subnet/components/xdc_zero/#key-components","title":"Key Components","text":""},{"location":"subnet/components/xdc_zero/#oracle","title":"Oracle","text":"<p>Acting as the architectural keystone, the Oracle ensures the safe transfer of pivotal data, notably block headers, bridging source and target blockchains. Utilizing CSC contracts, the system guarantees not just steadfast data transfer but also the safeguarding of crucial block header details on the destination blockchain. Such functionalities affirm the data\u2019s integrity and coherence throughout chains.</p>"},{"location":"subnet/components/xdc_zero/#relayer","title":"Relayer","text":"<p>The Relayer functions as the essential conduit for transactional precision. Its core duty is to extract payload data from the source chain\u2019s Endpoint contract and channel it to the counterpart on the target chain. With this mechanism in place, XDC ZERO promises the exact and secure relay of transaction data, fostering efficient cross-chain synergies.</p>"},{"location":"subnet/components/xdc_zero/#endpoint","title":"Endpoint","text":"<p>The XDC Zero Endpoint stands as the nexus for cross-chain communication, adeptly receiving and dispatching data packets across disparate blockchain networks. It offers indispensable services for the fluid operation of the cross-chain paradigm:</p> <ul> <li>Data Reception &amp; Dispatch: The Endpoint ensures data packets, once received from a chain, are aptly relayed to another, directing data unerringly to its designated recipient.</li> <li>Chain Integration: The Endpoint facilitates the seamless onboarding of new blockchains into the system. By denoting unique identifiers and related contracts, it amalgamates new chains into the existing cross-chain communication matrix.</li> <li>Transaction Authentication: With the Endpoint\u2019s prowess, transactions undergo rigorous validation, certifying their authenticity before processing, thus bolstering system security against potential threats.</li> <li>Payload Access: The Endpoint offers a user-friendly interface for applications and entities to pull cross-chain payload data, an essential feature for apps dependent on inter-chain data streams.</li> </ul> <p>At its core, the Endpoint functions as the orchestrator for all cross-chain data activities, ensuring data is meticulously received, processed, and channeled to its rightful destination.</p>"},{"location":"subnet/components/xdc_zero/#frontend","title":"Frontend","text":"<p>Experience a user-centric interface to manage the endpoint contracts spanning different chains. View the chain entities already synchronized with the current endpoint contract and effortlessly onboard new chain entities as per requirements.</p> <p></p>"},{"location":"subnet/components/xdc_zero/#endpoint-workflow","title":"Endpoint workflow","text":""},{"location":"subnet/components/xdc_zero/#workflow","title":"Workflow","text":""},{"location":"subnet/components/xdc_zero/#api-documentation","title":"API Documentation","text":""},{"location":"subnet/components/xdc_zero/#restricted-access-functions","title":"Restricted Access Functions","text":"<p>Functions accessible only by the contract owner or authorized clients.</p> <ol> <li> <p>send(uint256 rid, address rua, bytes data)</p> </li> <li> <p>Description: Sends a packet to the designated receive chain.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>rid</code>: ID of the receive chain.</li> <li><code>rua</code>: Address of the receive application.</li> <li><code>data</code>: Data payload for the packet.</li> </ul> </li> <li> <p>validateTransactionProof(uint256 csid, bytes key, bytes[] calldata receiptProof, bytes[] calldata transactionProof, bytes32 blockHash)</p> </li> <li> <p>Description: Validates transaction and receipt proofs, ensuring secure cross-chain communication.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>csid</code>: ID of the send chain.</li> <li><code>key</code>: RLP key.</li> <li><code>receiptProof</code>: Proof data for the transaction receipt.</li> <li><code>transactionProof</code>: Proof data for the transaction.</li> <li><code>blockHash</code>: Hash of the relevant block.</li> </ul> </li> <li> <p>registerChain(uint256 chainId, IFullCheckpoint csc, Endpoint endpoint)</p> </li> <li> <p>Description: Registers a new chain for packet reception.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>chainId</code>: ID of the chain being registered.</li> <li><code>csc</code>: Checkpoint contract for the receive chain.</li> <li><code>endpoint</code>: Endpoint contract for the send chain.</li> </ul> </li> <li> <p>approveApplication(uint256 rid, address rua, address sua)</p> </li> <li> <p>Description: Approves both a receive and send application for cross-chain interaction.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>rid</code>: ID of the receive chain.</li> <li><code>rua</code>: Address of the receive application.</li> <li><code>sua</code>: Address of the send application.</li> </ul> </li> <li> <p>approveRua(uint256 rid, address rua)</p> </li> <li> <p>Description: Approves a receive application (rua) for a specific chain.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>rid</code>: ID of the receive chain.</li> <li><code>rua</code>: Address of the receive application.</li> </ul> </li> <li> <p>approveSua(address sua)</p> </li> <li> <p>Description: Approves a send application (sua) for packet sending.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>sua</code>: Address of the send application.</li> </ul> </li> <li> <p>revokeApplication(uint256 rid, address rua, address sua)</p> </li> <li> <p>Description: Revokes approval for both a receive and send application.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>rid</code>: ID of the receive chain.</li> <li><code>rua</code>: Address of the receive application.</li> <li><code>sua</code>: Address of the send application.</li> </ul> </li> <li> <p>revokeRua(uint256 rid, address rua)</p> </li> <li> <p>Description: Revokes approval for a specific receive application.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>rid</code>: ID of the receive chain.</li> <li><code>rua</code>: Address of the receive application.</li> </ul> </li> <li> <p>revokeSua(address sua)</p> </li> <li>Description: Revokes approval for a send application.</li> <li>Parameters:<ul> <li><code>sua</code>: Address of the send application.</li> </ul> </li> </ol>"},{"location":"subnet/components/xdc_zero/#public-functions","title":"Public Functions","text":"<p>Functions accessible by any user or contract on the blockchain.</p> <ol> <li> <p>packetHash() returns (bytes32)</p> </li> <li> <p>Description: Retrieves the hash for the Packet event.</p> </li> <li> <p>getRlp(bytes memory key, bytes[] calldata proof, bytes32 root) returns (bytes memory)</p> </li> <li> <p>Description: Retrieves RLP data based on a Merkle Patricia proof.</p> </li> <li> <p>getFailureDataLength(uint256 rid) returns (uint256)</p> </li> <li> <p>Description: Retrieves the count of failed data entries for a specified receive chain.</p> </li> <li> <p>getReceiveChainLastIndex(uint256 chainId) returns (uint256)</p> </li> <li> <p>Description: Retrieves the last index for a specified receive chain.</p> </li> <li> <p>getSendChain(uint256 chainId) returns (Chain memory)</p> </li> <li> <p>Description: Retrieves details of a send chain based on its ID.</p> </li> <li> <p>getSendChainIds() returns (uint256[] memory)</p> </li> <li> <p>Description: Returns an array of all registered send chain IDs.</p> </li> <li> <p>allowanceRua(uint256 rid, address rua) returns (bool)</p> </li> <li> <p>Description: Checks if a receive application is approved for a specific chain.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>rid</code>: ID of the receive chain.</li> <li><code>rua</code>: Address of the receive application.</li> </ul> </li> <li> <p>allowanceSua(address sua) returns (bool)</p> </li> <li>Description: Checks if a send application is approved.</li> <li>Parameters:<ul> <li><code>sua</code>: Address of the send application.</li> </ul> </li> </ol>"},{"location":"subnet/components/xdc_zero/#algorithms-and-rules","title":"Algorithms and Rules","text":"<ul> <li>Packet Validation: Ensures that only approved applications on registered chains can send packets. The contract validates each transaction\u2019s authenticity by verifying proofs of transaction and receipt.</li> <li>Failure Data Handling: If a packet transmission fails, the contract records it, allowing for potential retries or analysis.</li> <li>Chain Registration: Only authorized users (contract owner) can register new chains, safeguarding against unauthorized cross-chain communication.</li> </ul>"},{"location":"subnet/install_guide/changelog/","title":"Changelog","text":""},{"location":"subnet/install_guide/changelog/#subnet-deployment-generator-changelog","title":"Subnet Deployment Generator Changelog","text":""},{"location":"subnet/install_guide/changelog/#v100-20241003","title":"v1.0.0 - 2024/10/03","text":"<ul> <li>Added Configuration Generator UI</li> <li>Added XDC-Zero configuration generation</li> <li>Added Faucet and Faucet Server</li> <li>Added helper scripts</li> <li>Changed default ports of components to prevent clashing<ul> <li>Stats Server - port 5213</li> <li>Frontend - port 5214</li> <li>Relayer - port 5215</li> <li>Faucet Server - port 5211</li> <li>Generator UI - port 5210</li> </ul> </li> <li>Documentation update<ul> <li>added Subnet setup video walkthrough</li> <li>added FAQ section</li> <li>added Contact section</li> </ul> </li> <li>Minor bug fixes</li> </ul>"},{"location":"subnet/install_guide/changelog/#v032-20240815","title":"v0.3.2 - 2024/08/15","text":"<ul> <li>Changed frontend default due to clashing from 5000 to 5555</li> </ul>"},{"location":"subnet/install_guide/changelog/#v031-20240724","title":"v0.3.1 - 2024/07/24","text":"<ul> <li>Use testnet by default</li> <li>Remove admin api by default</li> <li>Added PUBLIC_IP optional config in deployment-generator</li> <li>Bump component versions</li> </ul>"},{"location":"subnet/install_guide/changelog/#v021-20240109","title":"v0.2.1 - 2024/01/09","text":"<ul> <li>New generation style, pulls script from github to run multiple docker images instead of generating from single image.</li> <li>New Checkpoint Smart Contract (CSC) deployment image</li> <li>Supports upgradable CSC</li> <li>Bump components versions</li> <li>Fix bugs</li> <li>Code refactor, optimization</li> </ul>"},{"location":"subnet/install_guide/changelog/#v016","title":"v0.1.6","text":"<ul> <li>Bump relayer version to support gas fee changes</li> </ul>"},{"location":"subnet/install_guide/changelog/#v015","title":"v0.1.5","text":"<ul> <li>Added OS=mac option in \u2018docker.env\u2019. This option is intended for single machine testing environment only.</li> </ul>"},{"location":"subnet/install_guide/changelog/#v014","title":"v0.1.4","text":"<ul> <li>Added custom keys functionality     \u2018docker.env\u2019 now accepts GRANDMASTER_PK and SUBNETS_PK. Where SUBNETS_PK can have multiple keys separated by a comma \u2018,\u2019. Number of subnet keys must equal NUM_SUBNET. Keys are randomized if not provided.</li> <li>Added RELAYER_MODE in \u2018docker.env\u2019, CSC deployment will select from \u2018full\u2019 or \u2018lite\u2019 smart contract, default \u2018full\u2019.</li> <li>Automate CHECKPOINT_CONTRACT copy-paste step (manual action no longer required).</li> <li>PARENTCHAIN_WALLET is no longer required in \u2018docker.env\u2019, the address will be derived from PARENTCHAIN_WALLET_PK. </li> <li>Disabled parentchain observer in docker-compose.yml, unused for now (due to long startup time).</li> <li>Bump default subnet components stable versions</li> </ul>"},{"location":"subnet/install_guide/common_issues/","title":"Common Issues","text":""},{"location":"subnet/install_guide/common_issues/#common-issues","title":"Common Issues","text":"<ul> <li> <p>Subnet blocks are not being mined.</p> <ol> <li> <p>First confirm that the Subnet nodes are able to communicate with each other through the network layer. Run the check peer script <code>generated/scripts/check-peers.sh</code> the number of peers should be one less than number of subnet nodes. For example, if there are 3 Subnet nodes in total, each node should have 2 peers.</p> </li> <li> <p>If the nodes are peering but still not mining, it could be a low memory issue. In Docker configs you can try to increase memory or swap. Then, in case of fresh Subnet, delete data and start the nodes again. !</p> </li> <li> <p>Docker engine in Mac OS can be inconsistent after long-running or high-load. It could help to restart the machine and hard reset the subnet to get it running.</p> </li> </ol> </li> <li> <p>Subnet node does not boot with error log <code>Fatal: Error starting protocol stack: listen unix /work/xdcchain/XDC.ipc: bind: invalid argument</code></p> <p>This is due to the volume mount path being too long. The mounth path is your current directory (also can check with <code>pwd</code> command). Please move the <code>generated</code> folder to a shorter path and try again.</p> </li> <li> <p>Docker image startup fails with <code>SIGKILL</code> or <code>Error code: 137</code> found in logs. (Issue found in Frontend image)</p> <p>This error occurs because Docker ran Out Of Memory (OOM). You can increase the memory limit in Docker settings</p> </li> </ul>"},{"location":"subnet/install_guide/common_issues/#troubleshooting-scripts","title":"Troubleshooting Scripts","text":"<ul> <li><code>generated/scripts/check-mining.sh</code></li> </ul> <p>This will check your current block in Subnet</p> <ul> <li><code>generated/scripts/check-peers.sh</code></li> </ul> <p>This will check the number of peers of your Subnet node</p>"},{"location":"subnet/install_guide/common_issues/#telegram-troubleshooting-support-group","title":"Telegram Troubleshooting Support Group","text":"<p>https://t.me/+jvkX6LaLEEthZWM1</p>"},{"location":"subnet/install_guide/config_explanation/","title":"Configs Explanation","text":""},{"location":"subnet/install_guide/config_explanation/#configs-explanation","title":"Configs Explanation","text":""},{"location":"subnet/install_guide/config_explanation/#files-under-generated-directory","title":"Files under \u2018generated\u2019 directory","text":"<p>After the generator has succesfully run, all generated files will be under \u2018generated\u2019 directory. These files can be edited if you would like to further customize your subnet. Below is a description of each generated file and how it is used.</p> <ul> <li>commands.txt - The generated instructions to launch the subnet.</li> <li>common.env - The config parameters for Subnet services.</li> <li>contract_deploy.env - The config file used for CSC deployment.</li> <li>subnet*.env - The config parameters for each Subnet node.</li> <li>genesis.json - The \u2018block 0\u2019 of the Subnet. Initializes the blockchain for subnet nodes.</li> <li>genesis_input.yml - An intermediate file used in config generation.</li> <li>keys.json - Generated keypairs or custom keypairs by user input. Please be mindful to keep the credentials secure.</li> <li>docker-compose.yml - The main deployment file. Includes docker images versions, startup commands, network configurations.</li> <li>docker-compose.env - The config injection path that docker uses to point to other *.env files.</li> </ul>"},{"location":"subnet/install_guide/config_explanation/#commonenv","title":"common.env","text":"<ul> <li>PARENTNET_URL - RPC of the parentnet</li> <li>SUBNET_URL - RPC of the Subnet</li> <li>PARENTNET_WALLET - Public key of the Relayer wallet</li> <li>PARENTNET_WALLET_PK - Private key of the Relayer wallet</li> <li>VITE_SUBNET_URL - URL of stats server backend that is passed to your local browser</li> <li>VITE_SUBNET_RPC - URL of the Subnet RPC that is passed to your local browser</li> <li>CHECKPOINT_CONTRACT - Checkpoint Smart Contract address</li> <li>STATS_SECRET - Secret used by stats server backend</li> <li>EXTIP - Configured IP of bootnode</li> <li>BOOTNODE_PORT - Configured port of bootnode</li> </ul>"},{"location":"subnet/install_guide/config_explanation/#subnetenv","title":"subnet*.env","text":"<ul> <li>INSTANCE_NAME - Subnet node name</li> <li>PRIVATE_KEY - Subnet node private key</li> <li>BOOTNODES - Subnet bootnode to connect and discover other Subnet nodes</li> <li>NETWORK_ID - Subnet network ID</li> <li>SYNC_MODE - Node operation mode (full or archive)</li> <li>RPC_API - enabled api\u2019s scheme such as eth, xdpos, debug, net</li> <li>STATS_SERVICE_ADDRESS - Stats server backend URL</li> <li>STATS_SECRET - Secret to authenticate with Stats server</li> <li>PORT - Subnet node port for communication with other Subnet nodes</li> <li>RPCPORT - Subnet node port for accepting RPC calls</li> <li>WSPORT -  Subnet node port for accepting Websocket connections</li> <li>LOG_LEVEL - Desired logging level. 2=Warn, 3=Info, 4=Debug.</li> </ul>"},{"location":"subnet/install_guide/config_explanation/#subnet-ports","title":"Subnet Ports","text":"<ol> <li>Subnet Nodes - 3 ports are used per each subnet, RPC port, WS port, and Peering port. The port number is incremented by 1 for the next subnet node. For example subnet1\u2019s RPC is 8545, subnet2\u2019s RPC will be 8546 and so on.</li> <li>RPC PORT - 8545, 8546, 8547, \u2026 This is the API port, for outside chain communication to issue transaction or query chaindata.</li> <li>WS PORT - 9555, 9556, 9557, \u2026 This is not used currently.</li> <li>Peering port - 20303, 20304, 20305, \u2026 This is used for subnet nodes and bootnode peering and communication.</li> <li>Subnet ports config can be changed in <code>subnetX.env</code> for each individual subnet.</li> <li>Bootnode - port 20301</li> <li>Bootnode port can be changed at <code>BOOTNODE_PORT</code> under <code>common.env</code>. Also in each <code>subnetX.env</code>, <code>BOOTNODES</code> port has to be changed.</li> <li>Stats Server (UI backend) - port 5213. </li> <li>UI Frontend - port 5214.</li> <li>Relayer UI - port 5215.</li> <li>Faucet Server - port 5211</li> <li>Generator UI - port 5210.</li> </ol>"},{"location":"subnet/install_guide/faq/","title":"FAQ","text":""},{"location":"subnet/install_guide/faq/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"subnet/install_guide/faq/#subnet-node-requirements","title":"Subnet Node Requirements","text":"<ul> <li>How many Subnet nodes should I have?</li> </ul> <p>Even one node is enough to start the Subnet blockchain! However, for better decentralized security, 3+ nodes are recommended. At least \u2154 of all nodes must be online and honest to mine blocks.</p>"},{"location":"subnet/install_guide/faq/#development-and-testing","title":"Development and Testing","text":"<ul> <li>For testing, should I checkpoint the Subnet to devnet or testnet?</li> </ul> <p>It\u2019s recommended to use the testnet, as the devnet will be less stable due to frequent development changes.</p>"},{"location":"subnet/install_guide/faq/#managing-subnet-tokens","title":"Managing Subnet Tokens","text":"<ul> <li>Where are all the Subnet tokens, and how do I use the Subnet?</li> </ul> <p>In XDC-Subnet, all initial tokens are assigned to the Grandmaster wallet (check <code>keys.json</code>). You can transfer tokens to any wallet address. For easy transfers, refer to the Faucet documentation.</p> <ul> <li> <p>How can I manage Subnet tokens?</p> </li> <li> <p>Use the Subnet Faucet to easily transfer Subnet tokens to your users.</p> </li> <li> <p>Use any Web3 wallet (such as Metamask or OKX wallet), add the Subnet RPC as a custom network then connect to the Subnet and transfer tokens to other addresses.</p> </li> <li> <p>How can I easily give out Subnet tokens to my users?</p> </li> </ul> <p>A Faucet server script is provided for you to deploy under <code>generated/scripts/faucet-server.sh</code>. Anyone with access to the faucet page can request tokens. Please refer to the faucet page for more details.</p>"},{"location":"subnet/install_guide/faq/#security-and-sensitive-files","title":"Security and Sensitive Files","text":"<ul> <li>Which files contain sensitive data and private keys?</li> </ul> <p>The following files contain sensitive information and should be stored securely:</p> <ul> <li><code>common.env</code></li> <li><code>contract_deploy.env</code></li> <li><code>keys.json</code></li> <li><code>subnet*.env</code></li> </ul>"},{"location":"subnet/install_guide/faq/#configuration-changes","title":"Configuration Changes","text":"<ul> <li>How do I change the Relayer Wallet/Parentchain Wallet?</li> </ul> <p>You can update the <code>common.env</code> file to change the Relayer key. Refer to the service configuration documentation for more details.</p>"},{"location":"subnet/install_guide/faq/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>What should I do if a function didn\u2019t work or I encountered an unexpected bug?</li> </ul> <p>For troubleshooting support, join our Telegram Support Group.   For suggestions or requests, you can also reach out via:</p> <ul> <li>XDC Forum</li> <li>GitHub Issues</li> </ul>"},{"location":"subnet/install_guide/launch_subnet/","title":"Launch a Subnet","text":""},{"location":"subnet/install_guide/launch_subnet/#launch-a-subnet-in-10-minutes","title":"Launch a Subnet in 10 Minutes","text":""},{"location":"subnet/install_guide/launch_subnet/#requirements","title":"Requirements","text":"<ul> <li> <p>OS: Linux or Mac</p> </li> <li> <p>docker and docker compose. For installation of docker compose please refer to: https://docs.docker.com/compose/install/linux/</p> </li> <li> <p>Minimum Hardware Requirements:</p> <ul> <li> <p>Subnet Services:</p> <ul> <li>CPU: 4 Core</li> <li>Memory: 8 GB</li> <li>Storage: 32 GB</li> </ul> </li> <li> <p>Subnet Blockchain (per single Subnet node): </p> <ul> <li>CPU: 2 Core</li> <li>Memory: 4 GB</li> <li>Storage: 50 GB per year (takes up more space as blokchain grows)</li> </ul> </li> </ul> </li> <li> <p>Web3 wallet with funds. For testing we have testnet faucets:</p> <ul> <li>https://faucet.apothem.network/ </li> <li>https://faucet.blocksscan.io/</li> </ul> </li> </ul>"},{"location":"subnet/install_guide/launch_subnet/#video-walkthrough","title":"Video Walkthrough","text":""},{"location":"subnet/install_guide/launch_subnet/#deploy-subnet-with-subnet-deployment-wizard-ui","title":"Deploy Subnet With Subnet Deployment Wizard UI","text":"<ol> <li> <p>Pull <code>start.sh</code> script from the generator Github repo and run. This will start a local webserver   </p><pre><code>curl -O https://raw.githubusercontent.com/XinFinOrg/Subnet-Deployment/v2.0.0/container-manager/start.sh\nchmod +x start.sh\n./start.sh\n</code></pre> </li> <li> <p>Go to http://localhost:5210/ in your browser.  If you are running this on a remote server. <p>     - if this is running on your server, first use ssh tunnel: <code>ssh -N -L localhost:5210:localhost:5210 USERNAME@IP_ADDRESS -i SERVER_KEY_FILE</code>       - if you are using VSCode Remote Explorer, ssh tunnel will be available by default   </p> </p> </li> <li> <p>Select one of the pre-defined configs or customize your Subnet.   </p> </li> <li> <p>Follow the UI to finish the deployment, you can also check the Status monitor of your containers:</p> <ul> <li>Start Subnet nodes</li> <li>Deploy cross-chain contracts</li> <li>Start Subnet services   </li> </ul> </li> <li> <p>Once successfully deployed, you can check out UI usage guide</p> </li> </ol>"},{"location":"subnet/using_subnet/explorer/","title":"Using Subnet","text":""},{"location":"subnet/using_subnet/explorer/#blockchain-explorer","title":"Blockchain Explorer","text":"<p>You may optionally use an external blocks explorer if you require verbose browsing such as block detail, accounts browsing, contracts browsing. We can recommend Chainlens-free as one of the solution. Please follow the instructions as the previous link. You only need to pass one of the Subnet\u2019s RPC as a variable in the <code>docker-compose</code> command, which will most likely be <code>NODE_ENDPOINT=http://localhost:8545</code> or <code>NODE_ENDPOINT=http://&lt;MAIN_IP&gt;:8545</code>.</p>"},{"location":"subnet/using_subnet/faucet/","title":"Using Subnet","text":""},{"location":"subnet/using_subnet/faucet/#faucet","title":"Faucet","text":"<p>In Subnets, all native tokens are initially assigned to the Grandmaster Wallet. To allow users to use the Subnet, we have to distribute the tokens out of the Grandmaster. We have provided convenient scripts for you to easily share Subnet tokens to your users.</p>"},{"location":"subnet/using_subnet/faucet/#one-time-transfer","title":"One-time Transfer","text":"<p>Under <code>generated</code> directory run the Faucet script. </p> <pre><code>./scripts/faucet.sh\n</code></pre> <p>The script will ask for your source wallet private key. You can use the Grandmaster Wallet(check <code>keys.json</code> file for the private key).  Then input the destination wallet and the transfer amount.</p> <p></p>"},{"location":"subnet/using_subnet/faucet/#faucet-server","title":"Faucet Server","text":"<p>Under <code>generated</code> directory run the Faucet server script.</p> <pre><code>./scripts/faucet-server.sh\n</code></pre> <p>The script will ask for your source wallet private key. you can use the Grandmaster Wallet(check <code>keys.json</code> for the private key). By default, the server is hosted on port <code>5211</code> of your machine. Then, on your browser, visit the url: <code>http://127.0.0.1:5211</code></p> <p></p> <p>Input your destination wallet or feel free to generate a random wallet via Address Generator.</p> <p></p> <p>Submit and wait for confirmation.</p> <p></p> <p>You can host this on any server and allow users to make token requests by themselves.</p>"},{"location":"subnet/using_subnet/faucet/#transfer-subnet-funds-without-faucet","title":"Transfer Subnet Funds Without Faucet","text":"<p>The Faucet is not neccessary needed for funds transfer, most Ethereum compatible web3 wallet will also work. </p> <p>First import a new wallet with the Grandmaster private key. Then add a custom network pointing to your Subnet RPC URL. Finally, use the web3 wallet for tokens transfer.</p>"},{"location":"subnet/using_subnet/faucet/#faucet-source-code","title":"Faucet Source Code","text":"<p>Please feel free to check the below repositories for the Subnet Faucet source code.</p> <p>https://github.com/XinFinOrg/Subnet-Deployment/tree/master/deployment-generator/scripts</p> <p>https://github.com/XinFinOrg/Subnet-Deployment/tree/master/deployment-generator/src/faucet.js</p>"},{"location":"subnet/using_subnet/using_subnet/","title":"Using Subnet","text":""},{"location":"subnet/using_subnet/using_subnet/#ui-usage-guide","title":"UI Usage Guide","text":"<p>The guide for XDC Subnet user interface</p>"},{"location":"subnet/using_subnet/using_subnet/#homepage","title":"Homepage","text":"<p>Once subnet is successfully deployed. The homepage will show the following.</p> <p></p> <ol> <li>The Subnet blockchain state. You can see the current \u2018Not Confirmed\u2019 and \u2018Confirmed\u2019 blocks. \u2018Confirmed\u2019 or \u2018committed\u2019 blocks should be 3 blocks behind latest blocks.</li> <li>The Subnet blockchain AS KNOWN by the Parentchain. The Relayer periodically calls the Checkpoint Smart Contract to update the Subnet status (default every 2 minutes).</li> <li>The Network Info card shows the Subnet throughput state, by default Blocktime should be every 2 seconds. It also indicates the Parentchain network</li> <li>The Relayer Info card shows the Relayer status. Which Checkpoint Smart Contract (CSC) it calls, Subnet blocks in the backlog, and the remaining wallet funds.</li> <li>The Masternodes Info card shows the Subnet nodes status. By default, all Subnet nodes are Masternodes and all should be active.</li> </ol> <p>In the lower half of the homepage there are more information as shown.</p> <p></p> <ol> <li> <p>This card shows further details of subnet blocks, including their height, hash, proposer, and confirmation status. The left side of \u2018confirmation status\u2019 shows the block being committed in the Subnet chain and the right side shows the block hash being recorded in the Parent chain. </p> </li> <li> <p>This card shows a detailed view of the subnet nodes including their address. The status also differrentiates inactive nodes to \u2018penalty\u2019 or \u2018standby\u2019</p> </li> <li> <p>Additionally, you can select the UI theme (light or dark) by toggling this button.</p> </li> </ol>"},{"location":"subnet/using_subnet/using_subnet/#confirmation-checker","title":"Confirmation Checker","text":"<p>After navigating with the left menu bar to the Confirmation Checker of the Subnet, this will be shown.</p> <p></p> <p>The input box accepts Block height, Block hash, and even TX hash. </p> <p>After your input, the search engine will traverse the chain and display the info accodingly. Below is an example of Block height search.</p> <p></p> <ol> <li>Confirmation status of the block (or the block that TX belongs to)</li> <li>The block detailed information </li> <li>The Parentchain block where the Subnet block was recorded</li> </ol> <p>Next is another example of a Block hash search.</p> <p></p> <ol> <li>Confirmation status of the block (or the block that TX belongs to)</li> <li>The block detailed information </li> <li>As the Subnet block has not been checkpointed in the Parentchain, the UI is displaying height 0.</li> </ol>"},{"location":"subnet/using_subnet/using_subnet/#subnet-management","title":"Subnet Management","text":"<p>Subnet management is used for adding and removing Masternodes in the Subnet. To manage the subnet, you need to use the Grandmaster Account, as only the Grandmaster has the right to manage the Subnet.</p> <p>You can find the Grandmaster Key in the <code>keys.json</code> file.</p> <p>After making a modification with Subnet management, the change will take effect in the next epoch (900 blocks).</p> <p>When adding a Masternode address in the management, the new Masternode server should also be started up and added to the network.</p>"},{"location":"subnet/using_subnet/using_subnet/#1-log-in-to-the-wallet-and-connect-to-the-subnet","title":"1. Log in to the Wallet and Connect to the Subnet","text":"<p>To manage the subnet, you need to use your Grandmaster Account. Find the Grandmaster Key in the <code>keys.json</code> file and import this account into your wallet.</p> <p></p> <ol> <li>Go to the correct tab and switch to the Grandmaster Account.</li> <li> <p>Click the <code>Connect Wallet</code> button.    </p> </li> <li> <p>Choose your wallet and allow the subnet network to be added. The wallet will automatically switch to this network, as shown below:    </p> </li> </ol> <p>If the wallet doesn\u2019t switch to the subnet automatically, follow the instructions on the page to fill in the network details manually and connect to the subnet.</p> <ol> <li>Connect the account and network.    </li> </ol> <p>You will see a confirmation page like this:</p> <p></p>"},{"location":"subnet/using_subnet/using_subnet/#2-node-operations","title":"2. Node Operations","text":""},{"location":"subnet/using_subnet/using_subnet/#21-add-nodes-in-a-subnet","title":"2.1 Add Nodes in a Subnet","text":"<p>Subnet nodes are managed by two files. To add a node, create the corresponding <code>subnetX.env</code> file and add an entry in <code>docker-compose.yml</code>. Apply the changes to add the node to the subnet. (To remove a node, delete the related configuration file)  </p> <p>To add a node, follow these steps:  </p> <ol> <li> <p>Go to the <code>generated</code> directory and run the <code>add-node.sh</code> script. Enter the key when prompted: </p><pre><code>cd .scripts/add-node.sh\n</code></pre> </li> <li> <p>Update the subnet settings with the following commands: </p><pre><code>docker-compose --env-file docker-compose.env --profile machine1 up -d\ndocker-compose --env-file docker-compose.env --profile services up -d\n</code></pre> </li> </ol>"},{"location":"subnet/using_subnet/using_subnet/#22-add-candidate","title":"2.2 Add candidate","text":"<ol> <li>Switch to the Master List Tab</li> <li>Click the <code>Add a new master candidate</code> button to add the node as a master node. Delegation amount must be at least <code>10,000,000</code> Subnet tokens.    </li> </ol>"},{"location":"subnet/using_subnet/using_subnet/#23-change-node-delegation","title":"2.3 Change node delegation","text":"<ul> <li> <p>In the list, select the node you want to change the delegation for, then click the <code>Promote</code> / <code>Demote</code> button and enter the new delegation amount.</p> </li> <li> <p>If increasing the delegation, ensure the total delegation amount is over <code>10,000,000</code> Subnet tokens; otherwise, the transaction will fail.There is no extra benefit in delegating more than 10,000,000 tokens to an address</p> </li> <li> <p>If decreasing the delegation, ensure the remaining amount is still at least <code>10,000,000</code> Subnet tokens; otherwise, the transaction will fail.</p> <p></p> </li> </ul>"},{"location":"subnet/using_subnet/using_subnet/#24-remove-a-node","title":"2.4 Remove a node","text":"<ol> <li>In the Master List Tab, select the node you want to remove, and click the <code>Remove</code> button.</li> <li>After removal, the node\u2019s delegated XDC will be reset to zero, and the node information will be removed from the list after one epoch.    </li> </ol>"},{"location":"xdcchain/","title":"XDC Chain","text":"XDC Chain <p>The XDC Network is a cutting-edge blockchain platform designed to revolutionize the way businesses manage and exchange data, assets, and financial records. Boasting impressive speed and scalability, the XDC Network is capable of handling a high volume of transactions with minimal delays, making it ideal for enterprise-level applications. Its low transaction fees further enhance its appeal, allowing businesses to conduct operations cost-effectively.</p> <p>What truly sets the XDC Network apart is its military-grade security, ensuring that all data exchanges and asset transfers are protected against potential threats. This level of security is crucial for industries where trust and confidentiality are paramount. By leveraging the XDC Network, businesses can streamline their operations, improve record-keeping accuracy, and facilitate more efficient and secure data exchanges. Whether it's in finance, supply chain management, or trade, the XDC Network provides a robust and reliable infrastructure that empowers businesses to thrive in the digital age.</p> Developers <p>User guide to get started on XDC Chain</p> Governance <p>XDC Network is a community-oriented ecosystem, meticulously built upon the foundation of decentralized governance.</p> XDC Ecosystem <p>XDC ecosystem and developer tools</p> Run a Masternode <p>How to run a XDC Masternode</p> RPC Endpoints <p>Interacting with XDC requires sending requests through a specific RPC.</p>"},{"location":"xdcchain/evmtoxdc/","title":"Overview - XDC Chain","text":""},{"location":"xdcchain/evmtoxdc/#migrating-from-evm-to-xdc","title":"Migrating from EVM to XDC","text":"<p>Migrating a Solidity contract from Ethereum to the XDC network with Truffle involves several steps. The XDC network is a public blockchain that is EVM-compatible and designed to support enterprise-level applications. Truffle is a popular development framework for creating and deploying Solidity contracts.</p>"},{"location":"xdcchain/evmtoxdc/#step-1-install-truffle","title":"Step 1: Install Truffle","text":"<p>The first step is to install the XDC network and Truffle. This can be done by following the installation instructions provided by XDC and Truffle.</p> <p>Installation - Truffle Suite</p>"},{"location":"xdcchain/evmtoxdc/#step-2-configure-truffle-for-xdc","title":"Step 2: Configure Truffle for XDC","text":"<p>Next, Truffle needs to be configured to work with the XDC network. This involves creating a new Truffle project and configuring the Truffle config file to connect to the XDC network by using a public RPC connected to the XDC network.</p> <p>Configuration - Truffle Suite</p>"},{"location":"xdcchain/evmtoxdc/#step-3-compile-the-contract","title":"Step 3: Compile the Contract","text":"<p>After updating the Solidity contract, it needs to be compiled for the XDC network. This involves using the Truffle compiler to create a bytecode file that can be deployed on the XDC network.</p> <p>Compile contracts - Truffle Suite</p>"},{"location":"xdcchain/evmtoxdc/#step-4-deploy-the-contract","title":"Step 4: Deploy the Contract","text":"<p>The next step is to deploy the updated contract on the XDC network. This can be done using Truffle\u2019s deployment commands. It is important to ensure that the contract is deployed correctly and securely.</p>"},{"location":"xdcchain/evmtoxdc/#step-5-test-the-contract","title":"Step 5: Test the Contract","text":"<p>After deploying the contract, it is important to thoroughly test it on the XDC network. This includes testing all functions and features, as well as testing for security vulnerabilities. You can write tests in Truffle using Javascript to build debug and test contracts ready to be deployed onto the network</p> <p>Write JavaScript tests - Truffle Suite</p>"},{"location":"xdcchain/evmtoxdc/#step-6-update-clients-and-interfaces","title":"Step 6: Update Clients and Interfaces","text":"<p>Once the contract has been migrated and tested, any clients or interfaces that interact with the contract must be updated to be compatible with the XDC network by having them point to the appropriate RPCs on the xdc network.</p> <p>For a How-To guide showing migration of a dApp from Ethereum to the XDC Network please go to this link.</p>"},{"location":"xdcchain/introduction/","title":"Introduction","text":""},{"location":"xdcchain/introduction/#introduction","title":"Introduction","text":"<p>XinFin\u2019s XDC Network is an enterprise-ready, Layer-1, EVM-compatible, open-source, hybrid blockchain protocol specializing in tokenization for real-world decentralized finance. It uses a special type of delegated proof-of-stake (XDPoS) for consensus to ensure quick transaction times, minimal gas fees, and a remarkable 2,000+ transactions per second (TPS).</p> <p>XDC Network is backed by the XDC Community, leading to the formation of the XDC Foundation, which was established in 2021 to promote the growth and adoption of XDC through collaboration with a community of developers, trade experts, and content creators.</p>"},{"location":"xdcchain/introduction/#xinfin-delegated-proof-of-staked-authority","title":"XinFin Delegated Proof of Staked Authority","text":"<p>-</p>"},{"location":"xdcchain/introduction/#security","title":"Security","text":"<p>-</p>"},{"location":"xdcchain/introduction/#fast-finality","title":"Fast Finality","text":"<p>-</p>"},{"location":"xdcchain/introduction/#reward","title":"Reward","text":"<p>-</p>"},{"location":"xdcchain/introduction/#token-economy","title":"Token Economy","text":"<p>-</p>"},{"location":"xdcchain/introduction/#staking-and-governance","title":"Staking and Governance","text":"<p>-</p>"},{"location":"xdcchain/rewards/","title":"Rewards Mechanism","text":""},{"location":"xdcchain/rewards/#rewards-mechanism","title":"Rewards Mechanism","text":"<p>The XDC Network operates on a Delegated Proof of Stake (XDPoS) consensus mechanism, which allows for high transaction throughput, energy efficiency, and security. The network\u2019s rewards mechanism is designed to incentivize Masternode operators and participants who contribute to the stability, security, and growth of the network. This document outlines how the XDC rewards mechanism works, who is eligible for rewards, and how rewards are distributed.</p>"},{"location":"xdcchain/rewards/#overview-of-xdc-rewards-system","title":"Overview of XDC Rewards System","text":"<p>In the XDC Network, rewards are primarily distributed to Masternode operators who validate transactions, secure the network, and propose new blocks. Additionally, XDC token holders who delegate their tokens to Masternodes also earn a share of the rewards. The rewards mechanism is structured to:</p> <p>Incentivize decentralization by encouraging more participants to run Masternodes or delegate their tokens. Reward active participation in the network, such as block validation and staking. Ensure the economic sustainability of the XDC Network over time.</p>"},{"location":"xdcchain/rewards/#masternode-operator-rewards","title":"Masternode Operator Rewards","text":"<p>Masternodes are critical to the XDC Network\u2019s operations, responsible for validating transactions and maintaining consensus. To compensate for their role, Masternode operators receive rewards for every block they validate.</p> <ul> <li>Eligibility: To run a Masternode, an operator must stake a minimum of 10 million XDC tokens.</li> <li>Reward Distribution: Masternode operators are rewarded for validating blocks, and the rewards are distributed proportionally based on their performance and uptime.</li> <li>Block Rewards: A fixed reward is allocated for each block validated by the network. These block rewards are divided among Masternodes based on their contribution to the network.</li> </ul> <p>Note: Masternodes with better uptime and performance will receive a higher portion of the rewards.</p>"},{"location":"xdcchain/xdpos/","title":"Overview - XDC Chain","text":""},{"location":"xdcchain/xdpos/#xdpos-xdcs-consensus-mechanism","title":"XDPoS - XDC\u2019s Consensus Mechanism","text":"<p>XinFin Delegated Proof of Stake(XDPoS) is another form of Proof of Stake(PoS) consensus mechanism to scale up to Thousands of transactions per second. XDPOS concentrates block production in the hands of few semi-trusted entities in order to achieve more scalability than Proof of Work(PoW) or other Proof of Stake blockchains. XDPOS leverages the power of stakeholder to resolve consensus issues in a fair and democratic way. The Self KYC feature added in XinFin XDPoS is more enterprise and regulator friendly.</p>"},{"location":"xdcchain/xdpos/#common-terms","title":"Common Terms","text":"<ul> <li>Nominator: A coin holder who stakes or delegates their coin to one or more validator. </li> <li>Validator: A semi-trusted entity responsible for validating and producing blocks. </li> <li>Epoch: A cycle of few blocks in which validator nodes create blocks in turn.</li> </ul>"},{"location":"xdcchain/xdpos/#transition-from-pow-to-xdpos","title":"Transition from PoW to XDPoS","text":"<p>The traditional PoW mechanism, while effective in securing networks, is highly energy-intensive due to its reliance on solving complex cryptographic puzzles across all nodes in the network. This results in significant electricity consumption and poses environmental concerns. Recognizing these drawbacks, XinFin transitioned away from PoW and adopted Proof of Stake (PoS), a more energy-efficient consensus methodology. Eventually, XinFin advanced to XinFin Delegated Proof of Stake (XDPoS), which further enhances the efficiency and security of the network.</p> <p>To understand XDC Network\u2019s decision to adopt XDPoS, it\u2019s essential to explore the various consensus mechanisms.</p>"},{"location":"xdcchain/xdpos/#understanding-consensus-pow-vs-pos-vs-xdpos","title":"Understanding Consensus: PoW vs. PoS vs. XDPoS","text":"<p>In blockchain technology, consensus refers to a general agreement among nodes in the network, which is crucial for maintaining the integrity and accuracy of the distributed ledger. Unlike centralized systems like banks, where a central authority maintains records, blockchain relies on distributed ledgers to record information. Consensus ensures that all nodes agree on the state of the blockchain, including account balances, transactions, and more.</p> <p>Proof of Work (PoW) PoW relies on nodes solving cryptographic puzzles to validate transactions and create new blocks. This process requires significant computational power and consumes vast amounts of electricity, making it environmentally unsustainable and costly.</p> <p>Proof of Stake (PoS) PoS eliminates the need for energy-intensive computations. Instead of miners, PoS relies on validators who lock a portion of their cryptocurrency as a stake. Validators are chosen to propose the next block based on their stake and uptime. When a validator discovers a block that can be added to the blockchain, they validate it by placing a bet on it. The validators receive rewards proportional to their bets.</p> <p>XinFin Delegated Proof of Stake (XDPoS) XDPoS is an evolution of PoS and offers greater efficiency. It uses a reputation-based system to achieve consensus, where master nodes create blocks in a round-robin manner. The network elects block producers (also known as witnesses) who are responsible for validating transactions and creating the next block. The key features of XDPoS include:</p> <ul> <li>Random Election of Block Producers: Block producers are elected randomly and are limited in number. They are responsible for signing and creating blocks.</li> <li>Block Validators: These full nodes verify that the blocks created by block producers adhere to consensus rules.</li> <li>Community Governance: Unlike PoS, XDPoS provides the community with more governance rights, allowing them to have a greater say in the network\u2019s operations.</li> </ul>"},{"location":"xdcchain/xdpos/#pros-and-cons-of-xinfin-delegated-proof-of-stake","title":"Pros and Cons of XinFin Delegated Proof of Stake","text":""},{"location":"xdcchain/xdpos/#advantages","title":"Advantages","text":"<ul> <li>Speed: XDPoS enables faster transaction processing due to the limited number of witnesses involved.</li> <li>Cost Efficiency: The reduction in the number of participants in block creation lowers transaction costs.</li> <li>Scalability: XDPoS improves the network\u2019s scalability by ensuring efficient block creation and validation.</li> <li>Security: The reputation system and regular monitoring of witnesses help maintain the integrity of the network. Malicious actors can be penalized or removed by other master nodes.</li> </ul>"},{"location":"xdcchain/xdpos/#disadvantages","title":"Disadvantages","text":"<ul> <li>Centralization Risk: Since only master nodes can create blocks, there is a risk of centralization if these nodes collude.</li> <li>Limited Participation: The limited number of block producers may reduce the inclusiveness of the consensus process.</li> </ul>"},{"location":"xdcchain/xdpos/#why-xdc-network-prefers-xdpos","title":"Why XDC Network Prefers XDPoS","text":"<p>XDC Network chose XDPoS for its network due to its superior speed, cost efficiency, and scalability. XDPoS offers a more democratic, faster, and effective way to scale the network, making it the ideal consensus mechanism for XDC\u2019s hybrid blockchain platform.</p>"},{"location":"xdcchain/xdpos2/","title":"Overview - XDC Chain","text":""},{"location":"xdcchain/xdpos2/#xdpos-20","title":"XDPoS 2.0","text":"<p>Sitting at the core of the XDC Network, XinFin Delegated Proof-of-Stake consensus protocol 2.0 (XDPoS 2.0) regulates the XDC nodes in maintaining the consistency of a decentralized ledger (the blockchain) with strong security and performance guarantees. In this section, we provide an overview of XDPoS 2.0 by introducing its three pillars, including:</p> <ol> <li> <p>Master node election, which specifies how the delegation and proof-of-stake works.</p> </li> <li> <p>The consensus engine, namely, the HotStuff state machine replication (SMR) protocol, which is the state-of-the-art BFT (Byzantine fault-tolerant) SMR (state-machine replication) protocol. An illustration of its position in XDPoS 2.0 and a brief security analysis will be provided.</p> </li> <li> <p>Reward mechanism, which incentivizes nodes to join and maintain the XDC Network. </p> </li> </ol>"},{"location":"xdcchain/developers/apothemrpc/","title":"XDC Network - Apothem RPC","text":""},{"location":"xdcchain/developers/apothemrpc/#apothem-testnet-rpc","title":"Apothem Testnet RPC","text":"<p>The Apothem Testnet is the test environment for the XDC Network. It mirrors the Mainnet\u2019s functionality but operates with test tokens instead of real assets, making it ideal for developers to test and deploy their applications before going live.</p> <p>Public Networks Similar to the Mainnet, users can access the Apothem Testnet with an internet connection and full node RPC. They can perform all the same actions as on the Mainnet\u2014reading, creating, or validating transactions\u2014without the risks associated with live transactions.</p>"},{"location":"xdcchain/developers/apothemrpc/#xdc-testnet-specifications","title":"XDC TestNet Specifications","text":"<ul> <li>Chain ID: 51</li> <li>RPC Endpoint for XDC Apothem: </li> <li> <p>https://rpc.apothem.network</p> </li> <li> <p>WebSocket Endpoint: wss://ws.apothem.network</p> </li> <li>Consensus Mechanism: XDPoS (XinFin Delegated Proof of Stake)</li> <li>Block Finality: &gt;75%</li> <li>Consensus Nodes: Up to 108 (Masternodes)</li> <li>Genesis Block Date: 2019-05-31</li> <li>Transaction Fee: Gas price 0.25 Gwei</li> </ul>"},{"location":"xdcchain/developers/devnetrpc/","title":"XDC Network - Devnet RPC","text":""},{"location":"xdcchain/developers/devnetrpc/#devnet-rpc","title":"Devnet RPC","text":"<p>The XDC Devnet is a specialized test environment for the XDC Network, designed to closely mirror the Mainnet\u2019s functionality. The Devnet provides developers with a safe, controlled setting to test, deploy, and refine their applications using test tokens instead of real assets. This environment is crucial for ensuring that applications are robust and secure before they go live on the Mainnet.</p> <p>Public Networks Similar to the Mainnet, users can access the XDC Devnet via an internet connection and a full node RPC. The Devnet allows developers to perform the same operations they would on the Mainnet, including reading blockchain data, creating and validating transactions, and deploying smart contracts. However, since the Devnet operates with test tokens, developers can experiment freely without the financial risks associated with live transactions.</p>"},{"location":"xdcchain/developers/devnetrpc/#xdc-devnet-specifications","title":"XDC Devnet Specifications","text":"<ul> <li>Chain ID: 551</li> <li>RPC Endpoint for XDC Devnet: </li> <li> <p>https://devnetstats.hashlabs.apothem.network/devnet</p> </li> <li> <p>WebSocket Endpoint: https://devnetstats.hashlabs.apothem.network/devnetws</p> </li> <li>Consensus Mechanism: XDPoS (XinFin Delegated Proof of Stake)</li> <li>Block Finality: &gt;75%</li> <li>Consensus Nodes: Up to 108 (Masternodes)</li> <li>Genesis Block Date: 2024-12-26</li> <li>Transaction Fee: Gas price 0.25 Gwei</li> </ul>"},{"location":"xdcchain/developers/mainnetrpc/","title":"XDC Network - Mainnet RPC","text":""},{"location":"xdcchain/developers/mainnetrpc/#xdc-mainnet-rpc","title":"XDC Mainnet RPC","text":"<p>The XDC Mainnet is the live, operational environment of the XDC Network, where real transactions occur. The Mainnet is designed to support high-performance applications with low transaction fees and quick finality, making it ideal for enterprise use cases. The primary URL for accessing the XDC Mainnet via RPC. This endpoint allows you to interact with the blockchain by sending requests for data, submitting transactions, and more.</p> <p>Public Networks</p> <p>Users with an internet connection and access to a full node RPC can easily access the XDC Network\u2019s public blockchain. They can read, create, or validate transactions executed on the blockchain. The network\u2019s consensus mechanism, XDPoS (XinFin Delegated Proof of Stake), ensures that all nodes agree on the state of the network.</p>"},{"location":"xdcchain/developers/mainnetrpc/#xdc-mainnet-specifications","title":"XDC MainNet Specifications","text":"<ul> <li>Chain ID: 50</li> <li>RPC Endpoint for XDC Mainnet:</li> <li>https://erpc.xinfin.network</li> <li>https://earpc.xinfin.network</li> <li> <p>https://rpc.xdc.org</p> </li> <li> <p>WebSocket Endpoint: wss://ws.xinfin.network</p> </li> <li>Consensus Mechanism: XDPoS (XinFin Delegated Proof of Stake)</li> <li>Block Finality: &gt;75%</li> <li>Consensus Nodes: Up to 108 (Masternodes)</li> <li>Genesis Block Date: 2019-05-31</li> <li>Transaction Fee: Gas price 0.25 Gwei</li> </ul>"},{"location":"xdcchain/developers/mainnetrpc/#apothem-testnet-rpc","title":"Apothem Testnet RPC","text":"<p>The Apothem Testnet is the test environment for the XDC Network. It mirrors the Mainnet\u2019s functionality but operates with test tokens instead of real assets, making it ideal for developers to test and deploy their applications before going live.</p> <p>Public Networks Similar to the Mainnet, users can access the Apothem Testnet with an internet connection and full node RPC. They can perform all the same actions as on the Mainnet\u2014reading, creating, or validating transactions\u2014without the risks associated with live transactions.</p>"},{"location":"xdcchain/developers/mainnetrpc/#xdc-testnet-specifications","title":"XDC TestNet Specifications","text":"<ul> <li>Chain ID: 51</li> <li>RPC Endpoint for XDC Apothem: </li> <li> <p>https://rpc.apothem.network</p> </li> <li> <p>WebSocket Endpoint: wss://ws.apothem.network</p> </li> <li>Consensus Mechanism: XDPoS (XinFin Delegated Proof of Stake)</li> <li>Block Finality: &gt;75%</li> <li>Consensus Nodes: Up to 108 (Masternodes)</li> <li>Genesis Block Date: 2019-05-31</li> <li>Transaction Fee: Gas price 0.25 Gwei</li> </ul>"},{"location":"xdcchain/developers/mainnetrpc/#devnet-rpc","title":"Devnet RPC","text":"<p>The XDC Devnet is a specialized test environment for the XDC Network, designed to closely mirror the Mainnet\u2019s functionality. The Devnet provides developers with a safe, controlled setting to test, deploy, and refine their applications using test tokens instead of real assets. This environment is crucial for ensuring that applications are robust and secure before they go live on the Mainnet.</p> <p>Public Networks Similar to the Mainnet, users can access the XDC Devnet via an internet connection and a full node RPC. The Devnet allows developers to perform the same operations they would on the Mainnet, including reading blockchain data, creating and validating transactions, and deploying smart contracts. However, since the Devnet operates with test tokens, developers can experiment freely without the financial risks associated with live transactions.</p>"},{"location":"xdcchain/developers/mainnetrpc/#xdc-testnet-specifications_1","title":"XDC TestNet Specifications","text":"<ul> <li>Chain ID: 551</li> <li>RPC Endpoint for XDC Devnet: </li> <li> <p>https://devnetstats.apothem.network/devnet</p> </li> <li> <p>WebSocket Endpoint: </p> </li> <li>Consensus Mechanism: XDPoS (XinFin Delegated Proof of Stake)</li> <li>Block Finality: &gt;75%</li> <li>Consensus Nodes: Up to 108 (Masternodes)</li> <li>Genesis Block Date: 2019-05-31</li> <li>Transaction Fee: Gas price 0.25 Gwei</li> </ul>"},{"location":"xdcchain/developers/quick-guide/","title":"Quick Guide","text":"<p>Welcome to the Quick Guide for XDC Chain! This document is designed to provide you with a comprehensive overview of the XDC Network, its technology, and the tools you need to start your journey. Whether you\u2019re new to blockchain or an experienced developer, this guide will help you navigate the key resources and get up to speed with the XDC Network.</p>"},{"location":"xdcchain/developers/quick-guide/#getting-started","title":"Getting Started","text":"<p>The XDC Network is a powerful, enterprise-grade blockchain platform designed to facilitate secure, efficient, and scalable decentralized applications (DApps) and global trade solutions. If you\u2019re just starting your journey with the XDC Network, this section will help you understand the fundamental concepts, terminology, and processes.</p>"},{"location":"xdcchain/developers/quick-guide/#mainnet","title":"Mainnet","text":"<p>The XDC Network\u2019s Mainnet is the live, operational blockchain where actual transactions take place. Understanding the Mainnet is crucial for interacting with the XDC Network in a real-world environment.</p> <ul> <li>Mainnet Details: Learn more about the XDC Mainnet, its architecture, and operational specifics. Network Information and RPC Providers</li> <li>Explorer: Track transactions, smart contracts, and more on the XDC Mainnet using the official blockchain explorer. Mainnet Explorer</li> <li>Stats: Access real-time statistics about the XDC Mainnet, including transaction volumes, network health, and more. Mainnet Stats | XinFin Network Stats</li> </ul>"},{"location":"xdcchain/developers/quick-guide/#apothem-testnet","title":"Apothem Testnet","text":"<p>The Apothem Testnet is the testing environment for the XDC Network. It\u2019s an ideal place to experiment with your DApps, smart contracts, and other blockchain-based solutions before deploying them on the Mainnet.</p> <ul> <li>Testnet Details: Get an in-depth understanding of the Apothem Testnet and how to use it effectively. Testnet Details</li> <li>Explorer: View and track transactions on the Apothem Testnet using the official Testnet explorer. Apothem/Testnet Explorer</li> <li>Stats: Monitor the performance and activity on the Apothem Testnet. Testnet Stats</li> <li>Faucet: Need test XDC tokens? Use the Apothem Testnet faucet to get free tokens for testing. Get Test XDC</li> </ul>"},{"location":"xdcchain/developers/quick-guide/#xdc-devnet","title":"XDC Devnet","text":"<p>The XDC Devnet is a development-focused environment that allows developers to test and deploy their projects in a controlled setting. It\u2019s perfect for experimenting with new features, running simulations, and fine-tuning DApps before launching them on the Mainnet or Testnet.</p> <ul> <li>Devnet Explorer: Track and analyze transactions, smart contracts, and other activities on the XDC Devnet. Devnet Explorer</li> </ul>"},{"location":"xdcchain/developers/quick-guide/#useful-links","title":"Useful Links","text":"<p>Here are some additional tools and resources that will help you interact with the XDC Network more effectively:</p>"},{"location":"xdcchain/developers/quick-guide/#xdc-wallets","title":"XDC Wallets:","text":"<p>To start using XDC, you\u2019ll need a secure wallet\u2014a dedicated app for storing your XDC and interacting with other apps on the XDC Network. Ensuring the safety of your XDC is crucial, so choose from a variety of trusted wallets that offer high security and unique features. Here are some of the top options.</p>"},{"location":"xdcchain/developers/quick-guide/#additional-tools","title":"Additional Tools:","text":"<ul> <li>Remix: An online IDE for writing and deploying smart contracts on the XDC Network.</li> <li>Hardhat: A development environment for Ethereum-compatible blockchains, including XDC.</li> <li>Truffle: A development framework for Ethereum and XDC-compatible blockchains.</li> <li>Brownie: A Python-based development and testing framework for Ethereum and XDC smart contracts.</li> </ul>"},{"location":"xdcchain/developers/quick-guide/#community-and-support","title":"Community and Support","text":"<p>Join the vibrant community of developers, validators, and users who are actively contributing to the XDC Network\u2019s growth and innovation. Engage with the community, ask questions, and share your knowledge.</p> <ul> <li> <p>Dev Forum:  Participate in discussions, ask questions, and collaborate with other developers. XDC Dev Forum</p> </li> <li> <p>Discord:  Join the official XDC Network Discord channel for real-time support and community interaction. Join Discord</p> </li> </ul>"},{"location":"xdcchain/developers/quick-guide/#final-note","title":"Final Note","text":"<p>It\u2019s unnecessary to review every document to have a working knowledge of the XDC Network. Explore the resources as needed, dive deeper into specific sections that interest you, and don\u2019t hesitate to seek support from the community whenever necessary.</p> <p>Happy building on the XDC Network!</p> <p>For more tools and details, you can refer to XDC Chain Network Tools and Documents.</p>"},{"location":"xdcchain/developers/rpc/","title":"XDC Network - RPC","text":""},{"location":"xdcchain/developers/rpc/#network-endpoints","title":"Network Endpoints","text":"<p>The XDC Network is a robust, enterprise-grade blockchain platform designed for decentralized finance (DeFi), global trade, and other high-demand applications. For developers and users interacting with the XDC Network, the Remote Procedure Call (RPC) interface is a critical component. This guide provides a detailed overview of the RPC endpoints for both the XDC Mainnet and the Apothem Testnet, including their specifications and usage.</p>"},{"location":"xdcchain/developers/rpc/#what-is-rpc","title":"What is RPC?","text":"<p>Remote Procedure Call (RPC) is a protocol that allows communication between a client and a server over a network. In the context of blockchain, RPC is used to interact with the blockchain network by sending requests to full nodes. These requests can include reading blockchain data, creating and broadcasting transactions, and deploying smart contracts.</p>"},{"location":"xdcchain/developers/rpc/#mainnet-environment","title":"Mainnet Environment","text":"Service URL RPC https://erpc.xinfin.network Chain Id 50 Faucet endpoint https://chains.tools/faucet Explorer https://xdcscan.io/"},{"location":"xdcchain/developers/rpc/#apothem-environment","title":"Apothem Environment","text":"Service URL RPC https://rpc.apothem.network Chain Id 51 Faucet endpoint https://faucet.blocksscan.io/ Explorer https://apothem.xdcscan.io/"},{"location":"xdcchain/developers/rpc/#devnet-environment","title":"Devnet Environment","text":"Service URL RPC https://devnetstats.hashlabs.apothem.network/devnet Chain Id 551 Faucet endpoint https://faucet.blocksscan.io/ Explorer https://devnet.xdcscan.io/"},{"location":"xdcchain/developers/wallet-configuration/","title":"Wallet Configuration - XDC Network","text":""},{"location":"xdcchain/developers/wallet-configuration/#wallet-configuration","title":"Wallet configuration","text":"<p>You can use any Ethereum wallet with XDC. For instance, I will show you how to set up Metamask and Trustwallet for XDC.</p> <p>Testnet/Apothem</p> <ul> <li>Network Name: XDC Testnet/Apothem</li> <li>RPC URL: https://rpc.apothem.network/</li> <li>ChainID: 51</li> <li>Symbol: tXDC</li> <li>Explorer: https://apothem.xdcscan.io/</li> </ul> <p>Mainnet</p> <ul> <li>Network Name: XDC Mainnet</li> <li>RPC URL: https://erpc.xinfin.network</li> <li>ChainID: 50</li> <li>Symbol: XDC</li> <li>Explorer: https://xdcscan.io/</li> </ul> <p>Depending on your location and preference, you can choose from a variety of RPC endpoints for XDC. For more information about the endpoints and their features, please refer to the network information document that we have prepared for you. To ensure the best performance and user experience, you can test the latency of each endpoint before you configure it with your wallet. Refer</p>"},{"location":"xdcchain/developers/node_operators/bootstrap/","title":"Run XDC Nodes using Bootstrap Script","text":""},{"location":"xdcchain/developers/node_operators/bootstrap/#setup-xdc-masternode-using-bootstrap-script","title":"Setup XDC Masternode using Bootstrap Script","text":""},{"location":"xdcchain/developers/node_operators/bootstrap/#for-mainnet","title":"For Mainnet","text":"<p>Bootstrap Command XinFin Node Setup:</p> <pre><code>sudo su -c \"bash &lt;(wget -qO- https://raw.githubusercontent.com/XinFinOrg/XinFin-Node/master/setup/bootstrap.sh)\" root\n</code></pre> <p>Examples: After running the bootstrap command, the system will prompt you to specify the network. To connect to the Mainnet, simply enter \u201cmainnet\u201d.  </p><pre><code>$ sudo su -c \"bash &lt;(wget -qO- https://raw.githubusercontent.com/XinFinOrg/XinFin-Node/master/setup/bootstrap.sh)\" root\n[sudo] password for user:\nPlease enter your XinFin Network (mainnet/testnet/devnet) :- mainnet\n</code></pre> Next, you will be asked to input your XinFin Masternode name. Enter your desired Masternode name, such as \u201cDemo_Server.\u201d <pre><code>Your running network is mainnet\nPlease enter your XinFin MasterNode Name :- Demo_Server\nYour Masternode Name is Demo_Server\n</code></pre>"},{"location":"xdcchain/developers/node_operators/bootstrap/#for-testnet","title":"For Testnet","text":"<p>After running the bootstrap command, the system will prompt you to specify the network. To connect to the Mainnet, simply enter \u201ctestnet\u201d. </p><pre><code>sudo su -c \"bash &lt;(wget -qO- https://raw.githubusercontent.com/XinFinOrg/XinFin-Node/master/setup/bootstrap.sh)\" root\nPlease enter your XinFin Network (mainnet/testnet/devnet) :- testnet\n</code></pre> Next, you will be asked to input your XinFin Masternode name. Enter your desired Masternode name, such as \u201ctest01\u201d <pre><code>Your running network is testnet\nPlease enter your XinFin MasterNode Name :- test01\nYour Masternode Name is test01\n</code></pre>"},{"location":"xdcchain/developers/node_operators/bootstrap/#for-devnet","title":"For Devnet","text":"<p>After running the bootstrap command, the system will prompt you to specify the network. To connect to the Mainnet, simply enter \u201cdevnet\u201d. </p><pre><code>sudo su -c \"bash &lt;(wget -qO- https://raw.githubusercontent.com/XinFinOrg/XinFin-Node/master/setup/bootstrap.sh)\" root\nPlease enter your XinFin Network (mainnet/testnet/devnet) :- devnet\nYour running network is devnet\n</code></pre> Next, you will be asked to input your XinFin Masternode name. Enter your desired Masternode name, such as \u201ctest01\u201d <pre><code>Please enter your XinFin MasterNode Name :- test01\nYour Masternode Name is test01\nGenerate new private key and wallet address.\nIf you have your own key, you can change after this and restart the node\nType 'Y' or 'y' to continue:\n</code></pre>"},{"location":"xdcchain/developers/node_operators/docker/","title":"Setup XDC Masternode using Docker","text":""},{"location":"xdcchain/developers/node_operators/docker/#setup-xdc-masternode-using-docker","title":"Setup XDC Masternode using Docker","text":""},{"location":"xdcchain/developers/node_operators/docker/#setting-up-xdc-network-masternode-docker-version","title":"Setting up XDC Network Masternode Docker version","text":"<p>The server or VPS used for the masternode should be directly facing the internet with a public IP and without NAT. </p> <p>Operating System: Ubuntu 20.04 64-bit or higher</p> <p>Should be facing internet directly with public IP &amp; without NAT</p> <p>Tools: Docker, Docker Compose(1.27.4+)</p> <p>Setup (For Ubuntu 20.04 64-bit or higher Operating System)</p> <p>Follow the written steps starting from step 1, or you can watch the video tutorials:</p>"},{"location":"xdcchain/developers/node_operators/docker/#step-1-clone-repository","title":"Step 1: Clone repository","text":"<pre><code>git clone https://github.com/XinFinOrg/XinFin-Node.git\n</code></pre>"},{"location":"xdcchain/developers/node_operators/docker/#step-2-change-directory","title":"Step 2: Change directory","text":"<p>Then we change the directory to XinFin-Node </p><pre><code>cd XinFin-Node\n</code></pre>"},{"location":"xdcchain/developers/node_operators/docker/#step-3-install-docker","title":"Step 3: Install docker","text":"<p>We need to install Docker and Docker-Compose by running the following command: </p><pre><code>sudo ./setup/install_docker.sh\n</code></pre>"},{"location":"xdcchain/developers/node_operators/docker/#step-4","title":"Step 4:","text":"<p>Create a new .env file and copy the env.example file that exist in the mainnet directory. We will ensure we are in the \u201cmainnet\u201d directory by typing these commands. Once in edit mode for the .env file, name your masternode and use an email address in the respective fields </p><pre><code>cd mainnet\ncp env.example .env\nnano .env \n</code></pre> For Testnet <pre><code>cd testnet\ncp env.example .env\nnano .env\n</code></pre>"},{"location":"xdcchain/developers/node_operators/docker/#step-5-start-your-node","title":"Step 5: Start your Node","text":"<p>For Mainnet run the following commands: </p><pre><code>cd mainnet\nsudo docker-compose -f docker-compose.yml up -d\n</code></pre> At this point you should be able to see your masternode on the list of nodes here or as shown below: <p></p> <p>For Testnet run the following commands: </p><pre><code>cd testnet\nsudo docker-compose -f docker-compose.yml up -d\n</code></pre> You should be able to see your node listed on the [Apothem Network] page. Select \u201cSwitch to LiveNet\u201d to check LiveNetwork Stats and Select \u201cSwitch to TestNet\u201d for TestNetwork. <p>Your coinbase address can be found in xdcchain/coinbase.txt file.</p> <p>For troubleshooting purposes, you can stop the node by using the following command on either Mainnet or Testnet: </p><pre><code>sudo docker-compose -f docker-compose.yml down\n</code></pre> <p>Downloading a Network Snapshot (Mainnet or Apothem)</p> <p>The following steps are to expedite the syncing process of your node with the XDC Network.  If you followed the steps above, your node will take 3-4 days to sync up with the network fully.  You can reduce that time by downloading a network snapshot and bringing your node back up after the chain has been downloaded and unpacked. </p>"},{"location":"xdcchain/developers/node_operators/docker/#mainnet-snapshot","title":"Mainnet Snapshot","text":"<p>Bring down your node: </p><pre><code>sudo docker-compose -f docker-compose.yml down\n</code></pre> Remove the old xdchain file from the server <pre><code>rm -rf xdcchain.tar\n</code></pre> Download the snapshot <pre><code>wget https://download.xinfin.network/xdcchain.tar\n</code></pre> Unpack the xdcchain.tar file <pre><code>tar -xvzf xdcchain.tar\n</code></pre> The unpacking will take some time, and it will look like this: <p></p> <p>The following command will move the xdcchain/XDC to xdcchain/XDC_backup </p><pre><code>mv  xdcchain/XDC xdcchain/XDC_backup\nmv XDC xdcchain\n</code></pre> <p>Then we are going to remove the old \u201cnodekey\u201d file </p><pre><code>rm -rf xdcchain/XDC/nodekey\n</code></pre> <p>The last step is to run the bash upgrade.sh command </p><pre><code>bash upgrade.sh\n</code></pre> <p>This command will bring your node up and it will start syncing to the network. Once up and running, your node will be synced to the network in just a few minutes. </p> <p></p>"},{"location":"xdcchain/developers/node_operators/docker/#apothem-snapshot","title":"Apothem Snapshot","text":"<p>Bring down your node: </p><pre><code>sudo docker-compose -f docker-compose.yml down\n</code></pre> <p>Remove the old xdchain file from the server </p><pre><code>rm -rf apothem.tar\n</code></pre> <p>Download the snapshot</p> <p>Full Node snapshot:  </p><pre><code>wget http://downloads.apothem.network/xdcchain.tar\n</code></pre> <p>Archive Node snapshot:  </p><pre><code>wget http://downloads.apothem.network/xdcchain_archive.tar\n</code></pre> <p>Unpack the apothem.tar  file </p><pre><code>tar -xvzf apothem.tar\n</code></pre> <p>Move the xdcchain-testnet </p><pre><code>mv XDC xdcchain-testnet\n</code></pre> <p>Bring up the node </p><pre><code>sudo docker-compose -f docker-compose.yml up -d\n</code></pre>"},{"location":"xdcchain/developers/node_operators/dockerimg/","title":"Docker Image for the XDC Network","text":""},{"location":"xdcchain/developers/node_operators/dockerimg/#docker-image-for-the-xdc-network","title":"Docker Image for the XDC Network","text":""},{"location":"xdcchain/developers/node_operators/dockerimg/#what-is-a-docker-image","title":"What is a Docker Image?","text":"<p>A Docker image is a lightweight, stand-alone, executable package that includes everything needed to run an application, including code, runtime, libraries, and configurations. In the context of blockchain, Docker images simplify the deployment and management of nodes by enabling developers to encapsulate the entire blockchain environment into a single, replicable package.</p>"},{"location":"xdcchain/developers/node_operators/dockerimg/#purpose-of-the-xdc-networks-docker-image","title":"Purpose of the XDC Network\u2019s Docker Image","text":"<p>For the XDC Network, the Docker image provides a standardized and efficient way for developers to deploy, manage, and update their XDC nodes. The XDC Docker image streamlines the node deployment process, reducing configuration errors and minimizing setup time. It allows developers to run nodes in isolated containers, ensuring a consistent environment across different infrastructures.</p>"},{"location":"xdcchain/developers/node_operators/dockerimg/#key-features-of-the-xdc-docker-image-include","title":"Key features of the XDC Docker image include:","text":"<ol> <li>Ease of Deployment: Developers can deploy XDC nodes with just a few simple commands, reducing the complexity of setup.</li> <li>Portability: Docker images are portable, meaning they can run consistently across various platforms, including local machines, cloud environments, and virtualized infrastructure.</li> <li>Version Control: The XDC Docker image includes versioning, allowing developers to choose specific versions for compatibility testing or deployment.</li> <li>Improved Security: Isolated environments reduce security risks as each container runs independently from the host system.</li> </ol>"},{"location":"xdcchain/developers/node_operators/masternode/","title":"Masternode","text":""},{"location":"xdcchain/developers/node_operators/masternode/#run-a-node","title":"Run a Node","text":"<p>Nodes are computers or servers that run an application software known as clients to perform essential tasks on a blockchain network. These tasks can include transactions, block creation, consensus, network security, and other operational tasks for the network. The tasks and functionalities a node execute depend on the type of node, with each node having different system requirements and deployment processes. This section will provide details and information on how to run and maintain nodes on the XDC Network.</p>"},{"location":"xdcchain/developers/node_operators/masternode/#masternodes-and-standby-masternodes","title":"Masternodes and Standby Masternodes","text":"<p>The XDC Network runs on a globally distributed system of masternodes that participate in a Delegated Proof of Stake (DPoS) consensus mechanism. To enhance network integrity and security, Masternodes are required to complete a KYC process and stake 10,000,000 XDC. Masternodes can be identified as \u201cValidator\u201d or \u201cStandby\u201d Masternodes.</p> <p>Standby Masternodes (or \u201cStandby Nodes\u201d) are identical in form and function to Validators but do not participate in validating transactions and block creation. These nodes are on standby to fill the role of Validators that drop from network participation.</p>"},{"location":"xdcchain/developers/node_operators/masternode/#difference-between-full-and-archive-node","title":"Difference between Full and Archive Node","text":"<p>A full node on the XDC Network is a masternode (validator or standby) that contains the most recent 128 blocks, also known as \u201cPrunned\u201d nodes. </p> <p></p> <p>An Archive node on the XDC Network is a masternode or node that contains all the data since the Genesis block. </p> <p></p> <p>To host an XDC Masternode/Standby node, there are specific prerequisites that you need to meet in terms of hardware, software, and staking requirements. Below is a detailed list:</p>"},{"location":"xdcchain/developers/node_operators/masternode/#hardware-requirements","title":"Hardware Requirements","text":"<p>To ensure smooth operation and optimal performance of the XDC Masternode, the following hardware specifications are recommended:</p> <ul> <li>Processor (CPU): 6 Core</li> <li>Memory (RAM): Minimum 16 GB</li> <li>Storage (SSD): At least 1TB SSD or NVMe (solid-state drive) to accommodate blockchain data</li> <li>Network: Stable internet connection with at least 1 Gbps bandwidth (upstream and downstream)</li> <li>Operating System: Ubuntu 22.04 LTS (recommended)</li> </ul>"},{"location":"xdcchain/developers/node_operators/masternode/#software-requirements","title":"Software Requirements","text":"<p>Ensure that you have the following software and dependencies installed on your server before proceeding with the XDC Masternode setup:</p> <ul> <li>Ubuntu OS (20.04/22.04 LTS)</li> <li>Docker: A containerization tool for deploying and running the masternode environment</li> <li>Golang (Go): For XDC node compilation and execution</li> <li>Git: For cloning necessary repositories</li> <li>Firewall: Properly configured firewall rules (allowing ports such as 30303)</li> </ul>"},{"location":"xdcchain/developers/node_operators/masternode/#staking-requirements","title":"Staking Requirements","text":"<p>To host an XDC Masternode, a certain amount of XDC tokens must be staked. This ensures that the node operator has a vested interest in the security and performance of the network.</p> <ul> <li>XDC Token Stake: A minimum of 10 million XDC tokens is required to run a Masternode. These tokens must be locked in your Masternode wallet.</li> </ul>"},{"location":"xdcchain/developers/node_operators/masternode/#xdc-wallet-setup","title":"XDC Wallet Setup","text":"<p>You must set up an XDC wallet to manage your funds and staking:</p> <ul> <li>XDC Wallet Address: A valid XDC wallet address is needed to stake and manage the 10 million XDC tokens.</li> <li>Backup: Ensure that you have securely backed up your wallet\u2019s private keys or seed phrase to avoid any loss of funds.</li> </ul>"},{"location":"xdcchain/developers/node_operators/masternode/#securing-your-xdc-network-node","title":"Securing Your XDC Network Node","text":"<p>Before deploying your XDC Network Node, it is critical to secure the server, especially for validator or standby nodes that do not require RPC/WebSocket access. There are two deployment scenarios:</p> <ul> <li>RPC Node: Exposes necessary ports to allow DApps and users to interact with the blockchain.</li> <li>Validator/Standby Node: Only communicates with the network and should block unnecessary ports for better security.</li> </ul> <p>This guide provides instructions for securing your server, changing the default SSH port, and enabling a firewall for validator/standby nodes.</p>"},{"location":"xdcchain/developers/node_operators/masternode/#initial-server-setup","title":"Initial Server Setup","text":"<ol> <li>Log in to your server using credentials provided by your cloud provider:</li> </ol> <pre><code>ssh user@your-server-ip\n</code></pre> <ol> <li>Update OS packages:</li> </ol> <pre><code>sudo apt update -y &amp;&amp; sudo apt upgrade -y &amp;&amp; sudo apt autoremove -y\n</code></pre>"},{"location":"xdcchain/developers/node_operators/masternode/#setting-up-ssh-key-authentication","title":"Setting Up SSH Key Authentication","text":"<p>Step 1: Generate SSH Key (on your local machine or computer. Not the server)</p> <p>If you don\u2019t already have an SSH key:</p> <pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre> <ul> <li>Save the key in the default path (usually <code>~/.ssh/id_rsa</code>)</li> <li>You may optionally add a passphrase or password (Recommended for highest safety)</li> </ul> <p>Step 2: Upload the Public Key to the Server</p> <pre><code>ssh-copy-id -i ~/.ssh/id_rsa.pub user@your-server-ip\n</code></pre> <p>Step 3: Test Login</p> <pre><code>ssh user@your-server-ip\n</code></pre> <p>Optional: Disable Password Authentication</p> <p>Edit the SSH config file:</p> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> <p>Set the following:</p> <pre><code>PasswordAuthentication no\n</code></pre> <p>Restart the SSH service:</p> <pre><code>sudo systemctl restart ssh\n</code></pre> <p>Keep your private key (<code>~/.ssh/id_rsa</code>) safe. You will need it for all future logins.  Do not upload it to the server</p>"},{"location":"xdcchain/developers/node_operators/masternode/#locking-down-validatorstandby-nodes","title":"Locking Down Validator/Standby Nodes","text":"<p>If your masternode is being used only for the purpose of maintaining the XDC blockchain and does not require RPC/WebSocket access, the following hardening steps are recommended:</p> <ol> <li>Change the default SSH port</li> <li>Block all incoming traffic using a firewall</li> <li>Open only the required ports (30303 for XDC P2P and your new SSH port)</li> </ol>"},{"location":"xdcchain/developers/node_operators/masternode/#change-the-ssh-port","title":"Change the SSH Port","text":"<ol> <li>Edit the SSH config file:</li> </ol> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> <ol> <li>Find the line:</li> </ol> <pre><code>#Port 22\n</code></pre> <ol> <li>Remove the <code>#</code> and change <code>22</code> to a new custom port (for example, 2222):</li> </ol> <pre><code>Port 2222\n</code></pre> <ol> <li> <p>Save and exit:</p> </li> <li> <p>Press <code>CTRL+X</code>, then <code>Y</code>, then <code>ENTER</code></p> </li> <li> <p>Restart the SSH service:</p> </li> </ol> <pre><code>sudo systemctl restart ssh\n</code></pre> <p>To connect from now on:</p> <pre><code>ssh -p 2222 user@your-server-ip\n</code></pre>"},{"location":"xdcchain/developers/node_operators/masternode/#configure-ufw-uncomplicated-firewall","title":"Configure UFW (Uncomplicated Firewall)","text":"<ol> <li>Install UFW:</li> </ol> <pre><code>sudo apt install ufw\n</code></pre> <ol> <li>Set default policies:</li> </ol> <pre><code>sudo ufw default deny incoming\nsudo ufw default allow outgoing\n</code></pre> <ol> <li>Allow XDC P2P port:</li> </ol> <pre><code>sudo ufw allow 30303\n</code></pre> <ol> <li>Allow your SSH port (replace <code>2222</code> with your actual port):</li> </ol> <pre><code>sudo ufw allow 2222\n</code></pre> <ol> <li>Enable UFW:</li> </ol> <pre><code>sudo ufw enable\n</code></pre> <ol> <li>Reboot the server:</li> </ol> <pre><code>reboot\n</code></pre>"},{"location":"xdcchain/developers/node_operators/masternode/#testing-access","title":"Testing Access","text":"<p>After rebooting, reconnect to your server using the new SSH port:</p> <pre><code>ssh -p 2222 user@your-server-ip\n</code></pre> <p>If you are unable to connect, use your VPS provider\u2019s web console to access the server and make the necessary firewall or SSH configuration changes.</p>"},{"location":"xdcchain/developers/node_operators/masternode/#rpc-node-exception","title":"RPC Node Exception","text":"<p>If you are deploying an RPC node (e.g., for public dApp or API access), you must also allow the following ports:</p> <pre><code>sudo ufw allow 8888\nsudo ufw allow 8989\n</code></pre> <p>Once your server is secured and accessible, proceed with the standard masternode setup below.</p>"},{"location":"xdcchain/developers/node_operators/masternode/#setup-xdc-masternode-using-bootstrap-script","title":"Setup XDC Masternode using Bootstrap Script","text":""},{"location":"xdcchain/developers/node_operators/masternode/#for-mainnet","title":"For Mainnet","text":"<p>Bootstrap Command for XDC Masternode Setup:</p> <pre><code>sudo su -c \"bash &lt;(wget -qO- https://raw.githubusercontent.com/XinFinOrg/XinFin-Node/master/setup/bootstrap.sh)\" root\n</code></pre> <p>Examples: After running the bootstrap command, the system will prompt you to specify the network. To connect to the Mainnet, simply enter \u201cmainnet\u201d.  </p><pre><code>$ sudo su -c \"bash &lt;(wget -qO- https://raw.githubusercontent.com/XinFinOrg/XinFin-Node/master/setup/bootstrap.sh)\" root\n[sudo] password for user:\nPlease enter your XinFin Network (mainnet/testnet/devnet) :- mainnet\n</code></pre> Next, you will be asked to input your XinFin Masternode name. Enter your desired Masternode name, such as \u201cDemo_Server.\u201d <pre><code>Your running network is mainnet\nPlease enter your XinFin MasterNode Name :- Demo_Server\nYour Masternode Name is Demo_Server\n</code></pre>"},{"location":"xdcchain/developers/node_operators/masternode/#for-testnet","title":"For Testnet","text":"<p>After running the bootstrap command, the system will prompt you to specify the network. To connect to the Mainnet, simply enter \u201ctestnet\u201d. </p><pre><code>sudo su -c \"bash &lt;(wget -qO- https://raw.githubusercontent.com/XinFinOrg/XinFin-Node/master/setup/bootstrap.sh)\" root\nPlease enter your XinFin Network (mainnet/testnet/devnet) :- testnet\n</code></pre> Next, you will be asked to input your XinFin Masternode name. Enter your desired Masternode name, such as \u201ctest01\u201d <pre><code>Your running network is testnet\nPlease enter your XinFin MasterNode Name :- test01\nYour Masternode Name is test01\n</code></pre>"},{"location":"xdcchain/developers/node_operators/masternode/#for-devnet","title":"For Devnet","text":"<p>After running the bootstrap command, the system will prompt you to specify the network. To connect to the Mainnet, simply enter \u201cdevnet\u201d. </p><pre><code>sudo su -c \"bash &lt;(wget -qO- https://raw.githubusercontent.com/XinFinOrg/XinFin-Node/master/setup/bootstrap.sh)\" root\nPlease enter your XinFin Network (mainnet/testnet/devnet) :- devnet\nYour running network is devnet\n</code></pre> Next, you will be asked to input your XinFin Masternode name. Enter your desired Masternode name, such as \u201ctest01\u201d <pre><code>Please enter your XinFin MasterNode Name :- test01\nYour Masternode Name is test01\nGenerate new private key and wallet address.\nIf you have your own key, you can change after this and restart the node\nType 'Y' or 'y' to continue:\n</code></pre>"},{"location":"xdcchain/developers/node_operators/masternode/#how-to-stake-xdc-on-a-masternodestandby-node","title":"How to Stake XDC on a Masternode/Standby node","text":""},{"location":"xdcchain/developers/node_operators/masternode/#prerequisites","title":"Prerequisites","text":"<p>To stake XDC and run a masternode, you will need the following:</p> <ul> <li>XDCPay, XinFin Web Wallet, or a hardware wallet (Trezor supported)</li> <li>10,000,000 XDC (mainnet tokens) or test XDC (for the Apothem testnet)</li> <li>Your coinbase address (retrievable from your masternode)</li> </ul> <p>Note: You do not need 10,000,000 XDC to run a node solely for RPC queries or accessing live data from the blockchain. This guide covers staking for masternode candidates.</p>"},{"location":"xdcchain/developers/node_operators/masternode/#step-by-step-process-to-stake-your-xdc-node","title":"Step-by-Step Process to Stake Your XDC Node","text":""},{"location":"xdcchain/developers/node_operators/masternode/#1-access-the-staking-platform","title":"1. Access the Staking Platform","text":"<ul> <li>Visit XinFin Masternode page.</li> <li>Select either the Mainnet (for real staking) or Apothem (for testnet staking).</li> </ul>"},{"location":"xdcchain/developers/node_operators/masternode/#2-log-in-to-your-wallet","title":"2. Log In to Your Wallet","text":"<ul> <li>Click on the Login button on the masternode page.</li> <li>You\u2019ll be presented with multiple login options, including XDCPay, WalletConnect v2, Private Key/Mnemonic, Ledger Wallet or Trezor.</li> <li>For this guide, we\u2019ll use XDCPay:</li> <li>Open XDCPay and ensure you are connected to either the Mainnet or Apothem network.</li> <li>Log in to your wallet using XDCPay.</li> </ul>"},{"location":"xdcchain/developers/node_operators/masternode/#3-become-a-masternode-candidate","title":"3. Become a Masternode Candidate","text":"<ul> <li>Once logged in, click the Become a Candidate button on the dashboard.</li> <li>A new screen will appear where you will enter your KYC (Know Your Customer) information.</li> <li>KYC Process:<ul> <li>Upload your required KYC documents (you can find downloadable templates linked in the form).</li> <li>Once uploaded, the system will show a \u201cKYC True\u201d status, indicating your KYC has been approved.</li> </ul> </li> </ul>"},{"location":"xdcchain/developers/node_operators/masternode/#4-enter-your-coinbase-address","title":"4. Enter Your Coinbase Address","text":"<ul> <li>After completing KYC, input your Coinbase address. This address is specific to your masternode and can be retrieved by logging into your node.</li> </ul>"},{"location":"xdcchain/developers/node_operators/masternode/#5-confirm-and-apply-for-staking","title":"5. Confirm and Apply for Staking","text":"<ul> <li>Click on Apply to stake your XDC and become a masternode candidate.</li> <li>Your XDCPay wallet will prompt you to sign the transaction. Review the details and click Confirm.</li> </ul>"},{"location":"xdcchain/developers/node_operators/masternode/#6-transaction-confirmation","title":"6. Transaction Confirmation","text":"<ul> <li>After confirming, your staking transaction will be processed. Once successful, you\u2019ll receive a notification in the bottom-right corner of the screen.</li> <li>To verify the transaction, navigate to your XDCPay wallet, click on Transactions, and look for the Propose event. This event confirms your candidacy as a masternode.</li> </ul>"},{"location":"xdcchain/developers/node_operators/masternode/#setup-xdc-masternodestandby-node-using-one-click-installer","title":"Setup XDC Masternode/Standby node using One-Click Installer","text":""},{"location":"xdcchain/developers/node_operators/masternode/#method-1-setup-xinfins-xdc-masternode-one-click-installer","title":"Method 1: Setup XinFin\u2019s XDC Masternode One-click Installer","text":"<p>To qualify for Masternode on XinFin Network, you need at least 10,000,000 XDC, for the long term.</p> <p>Operating System:</p> <ul> <li>Apple Mac</li> <li>Windows</li> <li>Linux - Ubuntu</li> </ul>"},{"location":"xdcchain/developers/node_operators/masternode/#step-1","title":"Step 1:","text":"<p>Download XDC One-Click Installer (to setup Masternode) for Windows, Linux, and Mac OS and Install on your local machine.</p>"},{"location":"xdcchain/developers/node_operators/masternode/#step-2","title":"Step 2:","text":"<p>Now Run the One Click Installer, Make sure you read the Terms properly then click on I Agree button.</p> <ul> <li>\u201cC:\\Program Files\\XinFin-Network\u201d this will be your destination folder and this \u201cC:\\Users...\\AppData\\Roaming\\XDCChain\u201d will contain your Keystore folder.</li> <li>Make sure, you create a backup of your Keystore folder.</li> <li>Now click on \u201cXinFin Network\u201d One click installer.</li> <li>You can see the address of One Click Installer in left side, Also you can change the Network.</li> <li>For changing the Network, click on \u201cDevelop\u201d then select \u201cNetwork\u201d (XinFin - Main Network/ XinFin Apothem Network)</li> <li>You can check the Node status under the stats.xinfin.network</li> </ul> <p>Step 3: Create a wallet for Masternode</p> <ul> <li>Create your wallet address with Mnemonic Phrase or with Keystore. We always recommend to use Keystore for running a Masternode.</li> <li>Enter a strong password while creating the wallet.</li> <li>Don\u2019t lose your Keystore file</li> <li>Don\u2019t share it with anyone</li> <li>Always take a backup of your Keystore file.</li> <li>If you lose it, all your funds will get locked.</li> <li>After creating backup, Download your Keystore file.</li> <li>Now Access your wallet with Keystore and enter a valid password properly to access your wallet.</li> <li>If you are hosting a Masternode on Testnet then copy the Wallet address and paste it on XDC Faucet for the Testnet XDC</li> </ul> <p>Step 4: Host your Masternode</p> <ul> <li>For hosting the Masternode, you need to copy the private key and login the Masternode.</li> <li>For uploading the KYC, click on the \u201cBecome a Masternode\u201d</li> <li>Check the KYC criteria, the KYC file should be in pdf format only.</li> <li>Once you upload your KYC, you need to enter the \u201cCoinbase Address\u201d which is in One Click Installer after that click on Apply button.</li> <li>Now you will be notify with sucessful toaster i.e \u201cYou have successfully applied for Masternode\u201d</li> <li>You can check all the status regarding your Masternode here: master.apothem.network.</li> </ul>"},{"location":"xdcchain/developers/node_operators/masternode/#setup-xdc-masternodestandby-node-using-docker","title":"Setup XDC Masternode/Standby node using Docker","text":""},{"location":"xdcchain/developers/node_operators/masternode/#setting-up-xdc-network-masternode-docker-version","title":"Setting up XDC Network Masternode Docker version","text":"<p>The server or VPS used for the masternode should be directly facing the internet with a public IP and without NAT. </p> <p>Operating System: Ubuntu 20.04 64-bit or higher</p> <p>Should be facing internet directly with public IP &amp; without NAT</p> <p>Tools: Docker, Docker Compose(1.27.4+)</p> <p>Setup (For Ubuntu 20.04 64-bit or higher Operating System)</p> <p>Follow the written steps starting from step 1, or you can watch the video tutorials:</p>"},{"location":"xdcchain/developers/node_operators/masternode/#step-1-clone-repository","title":"Step 1: Clone repository","text":"<pre><code>git clone https://github.com/XinFinOrg/XinFin-Node.git\n</code></pre>"},{"location":"xdcchain/developers/node_operators/masternode/#step-2-change-directory","title":"Step 2: Change directory","text":"<p>Then we change the directory to XinFin-Node </p><pre><code>cd XinFin-Node\n</code></pre>"},{"location":"xdcchain/developers/node_operators/masternode/#step-3-install-docker","title":"Step 3: Install docker","text":"<p>We need to install Docker and Docker-Compose by running the following command: </p><pre><code>sudo ./setup/install_docker.sh\n</code></pre>"},{"location":"xdcchain/developers/node_operators/masternode/#step-4","title":"Step 4:","text":"<p>Create a new .env file and copy the env.example file that exist in the mainnet directory. We will ensure we are in the \u201cmainnet\u201d directory by typing these commands. Once in edit mode for the .env file, name your masternode and use an email address in the respective fields </p><pre><code>cd mainnet\ncp env.example .env\nnano .env \n</code></pre> For Testnet <pre><code>cd testnet\ncp env.example .env\nnano .env\n</code></pre>"},{"location":"xdcchain/developers/node_operators/masternode/#step-5-start-your-node","title":"Step 5: Start your Node","text":"<p>For Mainnet run the following commands: </p><pre><code>cd mainnet\nsudo docker-compose -f docker-compose.yml up -d\n</code></pre> At this point you should be able to see your masternode on the list of nodes here or as shown below: <p></p> <p>For Testnet run the following commands: </p><pre><code>cd testnet\nsudo docker-compose -f docker-compose.yml up -d\n</code></pre> You should be able to see your node listed on the [Apothem Network] page. Select \u201cSwitch to LiveNet\u201d to check LiveNetwork Stats and Select \u201cSwitch to TestNet\u201d for TestNetwork. <p>Your coinbase address can be found in xdcchain/coinbase.txt file.</p> <p>For troubleshooting purposes, you can stop the node by using the following command on either Mainnet or Testnet: </p><pre><code>sudo docker-compose -f docker-compose.yml down\n</code></pre>"},{"location":"xdcchain/developers/node_operators/masternode/#downloading-a-network-snapshot-mainnet-or-apothem","title":"Downloading a Network Snapshot (Mainnet or Apothem)","text":"<p>The following steps are to expedite the syncing process of your node with the XDC Network.  If you followed the steps above, your node will take 3-4 days to sync up with the network fully.  You can reduce that time by downloading a network snapshot and bringing your node back up after the chain has been downloaded and unpacked. </p>"},{"location":"xdcchain/developers/node_operators/masternode/#mainnet-snapshot","title":"Mainnet Snapshot","text":"<p>Bring down your node: </p><pre><code>sudo docker-compose -f docker-compose.yml down\n</code></pre> Remove the old xdchain file from the server <pre><code>rm -rf xdcchain.tar\n</code></pre> Download the snapshot <pre><code>wget https://download.xinfin.network/xdcchain.tar\n</code></pre> Unpack the xdcchain.tar file <pre><code>tar -xvzf xdcchain.tar\n</code></pre> The unpacking will take some time, and it will look like this: <p></p> <p>The following command will move the xdcchain/XDC to xdcchain/XDC_backup </p><pre><code>mv  xdcchain/XDC xdcchain/XDC_backup\nmv XDC xdcchain\n</code></pre> <p>Then we are going to remove the old \u201cnodekey\u201d file </p><pre><code>rm -rf xdcchain/XDC/nodekey\n</code></pre> <p>The last step is to run the bash upgrade.sh command </p><pre><code>bash upgrade.sh\n</code></pre> <p>This command will bring your node up and it will start syncing to the network. Once up and running, your node will be synced to the network in just a few minutes. </p> <p></p>"},{"location":"xdcchain/developers/node_operators/masternode/#apothem-snapshot","title":"Apothem Snapshot","text":"<p>Bring down your node: </p><pre><code>sudo docker-compose -f docker-compose.yml down\n</code></pre> <p>Remove the old xdchain file from the server </p><pre><code>rm -rf apothem.tar\n</code></pre> <p>Download the snapshot</p> <p>Full Node snapshot:  </p><pre><code>wget http://downloads.apothem.network/xdcchain.tar\n</code></pre> <p>Archive Node snapshot:  </p><pre><code>wget http://downloads.apothem.network/xdcchain_archive.tar\n</code></pre> <p>Unpack the apothem.tar  file </p><pre><code>tar -xvzf apothem.tar\n</code></pre> <p>Move the xdcchain-testnet </p><pre><code>mv XDC xdcchain-testnet\n</code></pre> <p>Bring up the node </p><pre><code>sudo docker-compose -f docker-compose.yml up -d\n</code></pre>"},{"location":"xdcchain/developers/node_operators/node_architecture/","title":"XDC Node Architecture","text":""},{"location":"xdcchain/developers/node_operators/node_architecture/#xdc-node-architecture","title":"XDC Node Architecture","text":"<p>The XDC Network is a hybrid blockchain platform designed to support both public and private states, offering enterprises the ability to conduct secure, scalable, and fast transactions. At the core of this network is its node architecture, which plays a crucial role in maintaining the network\u2019s integrity, security, and efficiency. This document provides a comprehensive overview of the XDC Node Architecture, detailing the various components and their functions.</p> <p>The XDC Network operates on a Delegated Proof of Stake (XDPoS) consensus mechanism, which ensures low energy consumption and high transaction throughput. The network is EVM-compatible, allowing it to support smart contracts and decentralized applications (dApps).</p>"},{"location":"xdcchain/developers/node_operators/node_architecture/#node-types-in-xdc-network","title":"Node Types in XDC Network","text":"<p>The XDC Network comprises several types of nodes, each serving a unique function within the ecosystem. These nodes are essential for network operations, including transaction validation, block creation, and consensus.</p> <p>Masternodes (Validator Nodes):</p> <ul> <li>Role: Masternodes are responsible for validating transactions, proposing and finalizing blocks, and maintaining consensus within the network. Requirements: To run a Masternode, operators must stake a 10 Million XDC, ensuring they have a vested interest in the network\u2019s security and performance. Functionality: These nodes participate in the consensus mechanism, verifying transactions and adding them to the blockchain. They also play a role in voting on protocol upgrades and governance decisions.</li> </ul>"},{"location":"xdcchain/developers/node_operators/node_architecture/#full-nodes","title":"Full Nodes:","text":"<ul> <li>Role: Full Nodes store the entire blockchain ledger, validating blocks and transactions independently.</li> <li>Requirements: Operators of Full Nodes do not need to stake XDC but must maintain a certain level of computing resources to store and process the entire blockchain.</li> <li>Functionality: These nodes propagate transactions across the network, ensuring that all participants have access to the same data. Full Nodes contribute to network security by verifying the integrity of the blockchain.</li> </ul>"},{"location":"xdcchain/developers/node_operators/node_architecture/#node-communication-and-network-topology","title":"Node Communication and Network Topology","text":"<p>The XDC Network employs a peer-to-peer (P2P) communication model where nodes interact directly with each other to share information and propagate transactions.</p> <ul> <li> <p>Gossip Protocol: </p> <ul> <li>Nodes in the XDC Network use a gossip protocol to disseminate information about transactions and blocks. This protocol ensures that all nodes are kept up-to-date with the latest state of the blockchain, maintaining network consistency and reducing the likelihood of forks.</li> </ul> </li> <li> <p>Networking Layers:</p> <ul> <li>Overlay Network: The XDC Network uses an overlay network to facilitate communication between nodes. This layer abstracts the underlying physical network, providing a virtual topology that is more manageable and secure.</li> <li>Transport Layer: The transport layer is responsible for ensuring reliable communication between nodes. It handles data transmission, error checking, and retransmission in case of data loss.</li> </ul> </li> </ul>"},{"location":"xdcchain/developers/node_operators/one-click-installer/","title":"Run XDC Nodes using One-Click Installer","text":""},{"location":"xdcchain/developers/node_operators/one-click-installer/#setup-xdc-masternode-using-one-click-installer","title":"Setup XDC Masternode using One-Click Installer","text":""},{"location":"xdcchain/developers/node_operators/one-click-installer/#method-1-setup-xinfins-xdc-masternode-one-click-installer","title":"Method 1: Setup XinFin\u2019s XDC Masternode One-click Installer","text":"<p>To qualify for Masternode on XinFin Network, you need at least 10,000,000 XDC, for the long term.</p> <p>Operating System:</p> <ul> <li>Apple Mac</li> <li>Windows</li> <li>Linux - Ubuntu</li> </ul>"},{"location":"xdcchain/developers/node_operators/one-click-installer/#step-1","title":"Step 1:","text":"<p>Download XDC One-Click Installer (to setup Masternode) for Windows, Linux, and Mac OS and Install on your local machine.</p>"},{"location":"xdcchain/developers/node_operators/one-click-installer/#step-2","title":"Step 2:","text":"<p>Now Run the One Click Installer, Make sure you read the Terms properly then click on I Agree button.</p> <ul> <li>\u201cC:\\Program Files\\XinFin-Network\u201d this will be your destination folder and this \u201cC:\\Users...\\AppData\\Roaming\\XDCChain\u201d will contain your Keystore folder.</li> <li>Make sure, you create a backup of your Keystore folder.</li> <li>Now click on \u201cXinFin Network\u201d One click installer.</li> <li>You can see the address of One Click Installer in left side, Also you can change the Network.</li> <li>For changing the Network, click on \u201cDevelop\u201d then select \u201cNetwork\u201d (XinFin - Main Network/ XinFin Apothem Network)</li> <li>You can check the Node status under the stats.xinfin.network</li> </ul> <p>Step 3: Create a wallet for Masternode</p> <ul> <li>Create your wallet address with Mnemonic Phrase or with Keystore. We always recommend to use Keystore for running a Masternode.</li> <li>Enter a strong password while creating the wallet.</li> <li>Don\u2019t lose your Keystore file</li> <li>Don\u2019t share it with anyone</li> <li>Always take a backup of your Keystore file.</li> <li>If you lose it, all your funds will get locked.</li> <li>After creating backup, Download your Keystore file.</li> <li>Now Access your wallet with Keystore and enter a valid password properly to access your wallet.</li> <li>If you are hosting a Masternode on Testnet then copy the Wallet address and paste it on XDC Faucet for the Testnet XDC</li> </ul> <p>Step 4: Host your Masternode</p> <ul> <li>For hosting the Masternode, you need to copy the private key and login the Masternode.</li> <li>For uploading the KYC, click on the \u201cBecome a Masternode\u201d</li> <li>Check the KYC criteria, the KYC file should be in pdf format only.</li> <li>Once you upload your KYC, you need to enter the \u201cCoinbase Address\u201d which is in One Click Installer after that click on Apply button.</li> <li>Now you will be notify with sucessful toaster i.e \u201cYou have successfully applied for Masternode\u201d</li> <li>You can check all the status regarding your Masternode here: master.apothem.network.</li> </ul>"},{"location":"xdcchain/developers/node_operators/slashing/","title":"XDC Network - Slashing Mechanism","text":""},{"location":"xdcchain/developers/node_operators/slashing/#xdc-network-slashing-mechanism","title":"XDC Network - Slashing Mechanism","text":"<p>The XDC Network, utilizing the XDPoS (Delegated Proof of Stake) consensus mechanism, ensures that its validators, known as masternodes, maintain optimal performance to keep the network stable and secure. One of the key features designed to ensure this reliability is the slashing mechanism, which acts as a corrective measure for underperforming masternodes.</p>"},{"location":"xdcchain/developers/node_operators/slashing/#objective-of-the-slashing-mechanism","title":"Objective of the Slashing Mechanism","text":"<p>The primary goal of the slashing mechanism is not to penalize or blame masternodes but to maintain a stable and high-performing network. It serves to mitigate issues arising from underperforming masternodes by holding them accountable while ensuring the overall system remains efficient.</p>"},{"location":"xdcchain/developers/node_operators/slashing/#how-the-xdc-network-slashing-mechanism-works","title":"How the XDC Network Slashing Mechanism Works","text":"<p>The slashing mechanism operates with a clear set of rules to manage masternode performance:</p>"},{"location":"xdcchain/developers/node_operators/slashing/#1-non-participation-in-block-signing","title":"1. Non-Participation in Block Signing:","text":"<ul> <li>If a masternode fails to sign any block during an entire epoch (a defined period within the consensus process), it will be slashed.</li> <li>The penalty for not participating in block creation during the epoch is exclusion from block production for the next four epochs. This temporary exclusion incentivizes masternodes to maintain uptime and perform their duties diligently.</li> </ul>"},{"location":"xdcchain/developers/node_operators/slashing/#2-handling-multiple-underperforming-masternodes","title":"2. Handling Multiple Underperforming Masternodes:","text":"<ul> <li>If multiple masternodes are underperforming within the same epoch, they face similar slashing penalties. Masternodes that have been underperforming for the past four epochs will be kicked out of the active masternode list and are not eligible to create blocks.</li> <li>Consequently, the number of active masternodes responsible for block creation in the following epoch could drop below the full 108, which is the maximum number of validators. In such cases, the system dynamically adjusts, allowing active masternodes to proceed with block creation without waiting for the underperforming ones.</li> </ul>"},{"location":"xdcchain/developers/node_operators/slashing/#3-role-after-being-slashed","title":"3. Role After Being Slashed:","text":"<ul> <li>A slashed masternode can still participate in block verification and signing. This enables it to demonstrate liveness to the network by submitting signatures for new blocks.</li> <li>However, the slashed masternode is ineligible for rewards during the slashed period. It can continue verifying and signing blocks, but this participation only serves as a signal of its recovery and does not result in earning block rewards.</li> </ul>"},{"location":"xdcchain/developers/node_operators/slashing/#properties-of-the-xdc-network-slashing-mechanism","title":"Properties of the XDC Network Slashing Mechanism**","text":""},{"location":"xdcchain/developers/node_operators/slashing/#1-accountability","title":"1. Accountability:","text":"<ul> <li>The XDPoS consensus protocol ensures accountability by detecting masternodes that remain inactive for an entire epoch. A smart contract known as the Block Signer tracks the activity of each masternode.</li> <li>The Block Signer stores the signatures from all masternodes, making it easy to determine whether a masternode has been performing its duties. If a masternode has failed to provide the required number of signatures during an epoch, the slashing mechanism is triggered.</li> </ul>"},{"location":"xdcchain/developers/node_operators/slashing/#2-liveness","title":"2. Liveness:","text":"<ul> <li>A core feature of the slashing mechanism is to allow slashed masternodes to regain their status. After being excluded from the active masternode list for four epochs, the masternode can return to normal operations if it resumes block verification and signing during the slashed period.</li> <li>This property ensures that temporarily underperforming masternodes, which may have experienced technical issues such as power outages, can rejoin the network without permanent penalties.</li> </ul>"},{"location":"xdcchain/developers/node_operators/slashing/#comparison-to-other-slashing-mechanisms","title":"Comparison to Other Slashing Mechanisms","text":"<p>The concept of slashing is not unique to the XDC Network and has been implemented in various other blockchain networks, such as Ethereum\u2019s Casper FFG (Friendly Finality Gadget). Casper\u2019s slashing mechanism is designed to prevent the \u201cnothing-at-stake\u201d problem, where validators can choose to support multiple forks of the blockchain. In Casper, if a validator is found to have validated conflicting forks, they are severely penalized by losing a significant portion, or even all, of their staked tokens.</p> <p>Unlike Casper\u2019s more punitive approach aimed at preventing malicious behavior, the XDC Network\u2019s slashing mechanism is designed to handle unintentional underperformance. Rather than harshly punishing validators for outages or system failures, XDC\u2019s system focuses on ensuring network performance without creating fear of excessive penalties. The design philosophy behind XDC\u2019s slashing mechanism is to avoid deterring participation by maintaining a fair yet firm system.</p>"},{"location":"xdcchain/developers/node_operators/slashing/#benefits-of-the-xdc-slashing-mechanism","title":"Benefits of the XDC Slashing Mechanism","text":"<ul> <li>Network Stability: By detecting and penalizing underperforming masternodes, the XDC Network ensures that the overall system remains stable and efficient.</li> <li>Encouraging Performance: Masternodes are incentivized to maintain their performance to avoid being slashed and losing rewards.</li> <li>Reduced Risk for Validators: Validators are not permanently penalized for minor lapses, such as technical issues, which encourages wider participation in the network without fear of catastrophic loss.</li> </ul>"},{"location":"xdcchain/developers/node_operators/validator_node/","title":"Validator/Standby Node","text":""},{"location":"xdcchain/developers/node_operators/validator_node/#validator-masternode","title":"Validator Masternode","text":"<p>Validator Masternodes operate and participate in XDC Network\u2019s DPoS consensus engine, validating transactions and block creation. </p>"},{"location":"xdcchain/developers/node_operators/validator_node/#standby-masternodes","title":"Standby Masternodes","text":"<p>Standby Masternodes (or \u201cStandby Nodes\u201d) are identical in form and function to Validators but do not participate in validating transactions and block creation. These nodes are on standby to fill the role of Validators that drop from network participation.</p>"},{"location":"xdcchain/developers/node_operators/validator_node/#setup-xdc-validatorstandby-node-using-bootstrap-script","title":"Setup XDC Validator/Standby Node using Bootstrap Script","text":""},{"location":"xdcchain/developers/node_operators/validator_node/#for-mainnet","title":"For Mainnet","text":"<p>Bootstrap Command XDC Validator/Standby Node Setup:</p> <pre><code>sudo su -c \"bash &lt;(wget -qO- https://raw.githubusercontent.com/XinFinOrg/XinFin-Node/master/setup/bootstrap.sh)\" root\n</code></pre> <p>Examples: After running the bootstrap command, the system will prompt you to specify the network. To connect to the Mainnet, simply enter \u201cmainnet\u201d.  </p><pre><code>$ sudo su -c \"bash &lt;(wget -qO- https://raw.githubusercontent.com/XinFinOrg/XinFin-Node/master/setup/bootstrap.sh)\" root\n[sudo] password for user:\nPlease enter your XinFin Network (mainnet/testnet/devnet) :- mainnet\n</code></pre> Next, you will be asked to input your XinFin Masternode name. Enter your desired Masternode name, such as \u201cDemo_Server.\u201d <pre><code>Your running network is mainnet\nPlease enter your XinFin MasterNode Name :- Demo_Server\nYour Masternode Name is Demo_Server\n</code></pre>"},{"location":"xdcchain/developers/node_operators/validator_node/#for-testnet","title":"For Testnet","text":"<p>After running the bootstrap command, the system will prompt you to specify the network. To connect to the Mainnet, simply enter \u201ctestnet\u201d. </p><pre><code>sudo su -c \"bash &lt;(wget -qO- https://raw.githubusercontent.com/XinFinOrg/XinFin-Node/master/setup/bootstrap.sh)\" root\nPlease enter your XinFin Network (mainnet/testnet/devnet) :- testnet\n</code></pre> Next, you will be asked to input your XinFin Masternode name. Enter your desired Masternode name, such as \u201ctest01\u201d <pre><code>Your running network is testnet\nPlease enter your XinFin MasterNode Name :- test01\nYour Masternode Name is test01\n</code></pre>"},{"location":"xdcchain/developers/node_operators/validator_node/#for-devnet","title":"For Devnet","text":"<p>After running the bootstrap command, the system will prompt you to specify the network. To connect to the Mainnet, simply enter \u201cdevnet\u201d. </p><pre><code>sudo su -c \"bash &lt;(wget -qO- https://raw.githubusercontent.com/XinFinOrg/XinFin-Node/master/setup/bootstrap.sh)\" root\nPlease enter your XinFin Network (mainnet/testnet/devnet) :- devnet\nYour running network is devnet\n</code></pre> Next, you will be asked to input your XinFin Masternode name. Enter your desired Masternode name, such as \u201ctest01\u201d <pre><code>Please enter your XinFin MasterNode Name :- test01\nYour Masternode Name is test01\nGenerate new private key and wallet address.\nIf you have your own key, you can change after this and restart the node\nType 'Y' or 'y' to continue:\n</code></pre>"},{"location":"xdcchain/developers/node_operators/validator_node/#setup-xdc-masternode-using-one-click-installer","title":"Setup XDC Masternode using One-Click Installer","text":"<p>To Setup XDC Masternode using One-Click Installer, refer</p>"},{"location":"xdcchain/governance/overview/","title":"Overview - XDCDAO","text":""},{"location":"xdcchain/governance/overview/#xdc-governance-overview","title":"XDC Governance Overview","text":"<p>The DAO Treasury within the XDCDAO framework plays a critical role in the XDC Network\u2019s decentralized governance system. It is meticulously designed to manage the community\u2019s collective resources efficiently, securely, and transparently. This section provides a structured overview of the DAO Treasury, highlighting its purpose, operation, funding sources, and significance within the DAOFIN ecosystem.</p>"},{"location":"xdcchain/governance/overview/#purpose-of-the-dao-treasury","title":"Purpose of the DAO Treasury","text":"<p>The DAO Treasury\u2019s primary objective is to support the sustainable growth and development of the XDC Network by financing projects and initiatives that align with the community\u2019s goals. It acts as the financial hub for:</p> <ul> <li>Funding protocol enhancements.</li> <li>Supporting community-driven projects.</li> <li>Enhancing network security.</li> <li>Facilitating ecosystem expansion.</li> </ul>"}]}